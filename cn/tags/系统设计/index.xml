<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统设计 on x1ah</title><link>https://when.run/cn/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link><description>Recent content in 系统设计 on x1ah</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Wed, 02 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://when.run/cn/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>如何设计一个秒杀系统</title><link>https://when.run/cn/posts/miao-sha/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/miao-sha/</guid><description>&lt;h1 id="如何设计一个秒杀系统">如何设计一个秒杀系统&lt;/h1>
&lt;blockquote>
&lt;p>总结极客时间专栏《如何设计一个秒杀系统》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://time.geekbang.org/column/127">极客时间&lt;/a>&lt;/p>
&lt;h1 id="问题">问题&lt;/h1>
&lt;p>其实这类高并发问题，总结起来就是两点，&lt;code>并发读&lt;/code>、 &lt;code>并发写&lt;/code>。并且在这种情况下，系统还需要做到：&lt;/p>
&lt;ul>
&lt;li>高性能：支持并发读并发写&lt;/li>
&lt;li>一致性：保证系统正确，如不发生超卖等&lt;/li>
&lt;li>高可用：保证系统在极端条件下的可用性，PlanB 等&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="原则">原则&lt;/h1>
&lt;ul>
&lt;li>数据尽量少：c-s 传输过程中，数据尽量少，减少传输时间&lt;/li>
&lt;li>请求数尽量少：减少资源消耗&lt;/li>
&lt;li>路径尽量短：请求会经过若干个中间件，经过的中间件应该尽量少，每个节点都可能会挂，最后整体可用性(&amp;lt;1)就是经过的所有节点可用性的乘积&lt;/li>
&lt;li>依赖尽量少：指的是业务依赖（优惠券、用户信息等），防止主要服务被其他附属依赖给拖垮掉&lt;/li>
&lt;li>不要有单点：单点就是整个系统中最弱的地方，很容易被击垮&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="动静分离">动静分离&lt;/h1>
&lt;h2 id="静态数据">静态数据&lt;/h2>
&lt;ul>
&lt;li>统一 cache 层&lt;/li>
&lt;li>CDN&lt;/li>
&lt;li>代理服务器缓存&lt;/li>
&lt;/ul>
&lt;h2 id="动态数据">动态数据&lt;/h2>
&lt;ul>
&lt;li>业务隔离：必须参加活动需要提前报名，服务器对这些热点进行预热&lt;/li>
&lt;li>系统隔离：秒杀系统单独部署，落到不同集群当中，避免拖垮其他服务&lt;/li>
&lt;li>数据隔离：针对这些热点数据，比如启用单独的 cache 或 MySQL 实例&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="流量削峰">流量削峰&lt;/h1>
&lt;p>面对秒杀系统需要承受的海量流量，如果全部落到数据库上，那么数据库将不堪重负，因此可以进行分层的流量削峰：&lt;/p>
&lt;ul>
&lt;li>答题、验证码等，在客户端直接过滤，将流量摊平，而不是瞬时洪峰流量&lt;/li>
&lt;li>服务端请求排队，请求到达了不即时返回，而是塞进队列里，FIFO 方式进行处理，然后异步通知客户端（体验不好，用户无法实时收到反馈）&lt;/li>
&lt;li>分层校验，保证落到数据库的请求都是有效请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/fb7F5UO.png">&lt;/p>
&lt;hr>
&lt;h1 id="减库存">减库存&lt;/h1>
&lt;p>减库存是最关键的一个逻辑，需要保证高并发的情况下，不会发生超售。常用的有三种减库存方案：&lt;/p>
&lt;ul>
&lt;li>下单减库存：下单就减库存，会产生非常多无效订单，体验不好。&lt;/li>
&lt;li>付款减库存：可能会有用户在付款完成之后，结果提示没库存了。&lt;/li>
&lt;li>预扣库存：用户下单后减库存，但是库存只有几分钟有效期，过了有效期就回收库存，体验较好。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="planb">PlanB&lt;/h1>
&lt;p>高可用系统的 PlanB，针对秒杀系统，可以做一些事，比如：&lt;/p>
&lt;ul>
&lt;li>降级：如系统容量到达一点程度之后，关闭一些非核心功能，把有限的资源让给核心功能&lt;/li>
&lt;li>限流：在事先进行压力测试时，预估一个最高 QPS，并将其设为阈值，到达这个阈值之后，其他请求扔队列或者直接丢弃&lt;/li>
&lt;li>拒绝服务：最坏的情况，达到某个临界点（CPU 90%）直接拒绝服务，保护服务，等负载下降之后恢复，避免被直接长时间拖垮。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vRlVzqW.png">&lt;/p></description><content>&lt;h1 id="如何设计一个秒杀系统">如何设计一个秒杀系统&lt;/h1>
&lt;blockquote>
&lt;p>总结极客时间专栏《如何设计一个秒杀系统》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://time.geekbang.org/column/127">极客时间&lt;/a>&lt;/p>
&lt;h1 id="问题">问题&lt;/h1>
&lt;p>其实这类高并发问题，总结起来就是两点，&lt;code>并发读&lt;/code>、 &lt;code>并发写&lt;/code>。并且在这种情况下，系统还需要做到：&lt;/p>
&lt;ul>
&lt;li>高性能：支持并发读并发写&lt;/li>
&lt;li>一致性：保证系统正确，如不发生超卖等&lt;/li>
&lt;li>高可用：保证系统在极端条件下的可用性，PlanB 等&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="原则">原则&lt;/h1>
&lt;ul>
&lt;li>数据尽量少：c-s 传输过程中，数据尽量少，减少传输时间&lt;/li>
&lt;li>请求数尽量少：减少资源消耗&lt;/li>
&lt;li>路径尽量短：请求会经过若干个中间件，经过的中间件应该尽量少，每个节点都可能会挂，最后整体可用性(&amp;lt;1)就是经过的所有节点可用性的乘积&lt;/li>
&lt;li>依赖尽量少：指的是业务依赖（优惠券、用户信息等），防止主要服务被其他附属依赖给拖垮掉&lt;/li>
&lt;li>不要有单点：单点就是整个系统中最弱的地方，很容易被击垮&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="动静分离">动静分离&lt;/h1>
&lt;h2 id="静态数据">静态数据&lt;/h2>
&lt;ul>
&lt;li>统一 cache 层&lt;/li>
&lt;li>CDN&lt;/li>
&lt;li>代理服务器缓存&lt;/li>
&lt;/ul>
&lt;h2 id="动态数据">动态数据&lt;/h2>
&lt;ul>
&lt;li>业务隔离：必须参加活动需要提前报名，服务器对这些热点进行预热&lt;/li>
&lt;li>系统隔离：秒杀系统单独部署，落到不同集群当中，避免拖垮其他服务&lt;/li>
&lt;li>数据隔离：针对这些热点数据，比如启用单独的 cache 或 MySQL 实例&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="流量削峰">流量削峰&lt;/h1>
&lt;p>面对秒杀系统需要承受的海量流量，如果全部落到数据库上，那么数据库将不堪重负，因此可以进行分层的流量削峰：&lt;/p>
&lt;ul>
&lt;li>答题、验证码等，在客户端直接过滤，将流量摊平，而不是瞬时洪峰流量&lt;/li>
&lt;li>服务端请求排队，请求到达了不即时返回，而是塞进队列里，FIFO 方式进行处理，然后异步通知客户端（体验不好，用户无法实时收到反馈）&lt;/li>
&lt;li>分层校验，保证落到数据库的请求都是有效请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/fb7F5UO.png">&lt;/p>
&lt;hr>
&lt;h1 id="减库存">减库存&lt;/h1>
&lt;p>减库存是最关键的一个逻辑，需要保证高并发的情况下，不会发生超售。常用的有三种减库存方案：&lt;/p>
&lt;ul>
&lt;li>下单减库存：下单就减库存，会产生非常多无效订单，体验不好。&lt;/li>
&lt;li>付款减库存：可能会有用户在付款完成之后，结果提示没库存了。&lt;/li>
&lt;li>预扣库存：用户下单后减库存，但是库存只有几分钟有效期，过了有效期就回收库存，体验较好。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="planb">PlanB&lt;/h1>
&lt;p>高可用系统的 PlanB，针对秒杀系统，可以做一些事，比如：&lt;/p>
&lt;ul>
&lt;li>降级：如系统容量到达一点程度之后，关闭一些非核心功能，把有限的资源让给核心功能&lt;/li>
&lt;li>限流：在事先进行压力测试时，预估一个最高 QPS，并将其设为阈值，到达这个阈值之后，其他请求扔队列或者直接丢弃&lt;/li>
&lt;li>拒绝服务：最坏的情况，达到某个临界点（CPU 90%）直接拒绝服务，保护服务，等负载下降之后恢复，避免被直接长时间拖垮。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vRlVzqW.png">&lt;/p></content></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on x1ah</title><link>https://when.run/cn/posts/</link><description>Recent content in Posts on x1ah</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Sat, 16 Nov 2024 12:34:20 +0800</lastBuildDate><atom:link href="https://when.run/cn/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>方法论</title><link>https://when.run/cn/posts/methodology/</link><pubDate>Sat, 16 Nov 2024 12:34:20 +0800</pubDate><guid>https://when.run/cn/posts/methodology/</guid><description>&lt;h1 id="目标设定与管理">目标设定与管理&lt;/h1>
&lt;h2 id="smart-原则">SMART 原则&lt;/h2>
&lt;ul>
&lt;li>定义：SMART 代表具体（Specific）、可衡量（Measurable）、可达成（Attainable）、相关性（Relevant）、时限性（Time-bound）。这是一种帮助个人或团队设定具体、可追踪目标的方法。&lt;/li>
&lt;li>使用场景：在绩效管理中辅助制定绩效目标，也适用于个人工作或项目目标的设定。&lt;/li>
&lt;li>分类：目标管理&lt;/li>
&lt;/ul>
&lt;h2 id="okrobjectives-and-key-results">OKR（Objectives and Key Results）&lt;/h2>
&lt;ul>
&lt;li>定义：OKR是一种目标设定框架，由目标（Objectives）和关键结果（Key Results）组成，旨在确保团队和个人的工作与公司目标一致。&lt;/li>
&lt;li>使用场景：适用于需要跟踪和衡量进展的长期目标和短期目标。&lt;/li>
&lt;li>分类：目标管理。&lt;/li>
&lt;/ul>
&lt;h2 id="bscbalanced-scorecard">BSC（Balanced Scorecard）&lt;/h2>
&lt;ul>
&lt;li>定义：平衡计分卡是一种绩效管理工具，它将组织的愿景和策略转化为一组绩效指标。&lt;/li>
&lt;li>使用场景：用于企业战略规划和绩效管理，帮助组织从财务、客户、内部流程、学习和成长四个维度衡量绩效。&lt;/li>
&lt;li>分类：绩效管理。&lt;/li>
&lt;/ul>
&lt;h2 id="pdca-循环">PDCA 循环&lt;/h2>
&lt;ul>
&lt;li>定义：PDCA 代表计划（Plan）、执行（Do）、检查（Check）、行动（Act）。这是一个持续改进和问题解决的循环过程。&lt;/li>
&lt;li>使用场景：质量管理、生产管理、个人工作流程的持续改进。&lt;/li>
&lt;li>分类：质量管理&lt;/li>
&lt;/ul>
&lt;h1 id="问题分析与解决">问题分析与解决&lt;/h1>
&lt;h2 id="star-法则">STAR 法则&lt;/h2>
&lt;ul>
&lt;li>定义：STAR 代表情境（Situation）、任务（Task）、行动（Action）、结果（Result）。这是一个用于描述特定事件或经历的结构化方法。&lt;/li>
&lt;li>使用场景：面试中回答行为性问题、工作汇报、案例分析、答辩等。&lt;/li>
&lt;li>分类：面试技巧、案例分析&lt;/li>
&lt;/ul>
&lt;h2 id="5w2h-分析法">5W2H 分析法&lt;/h2>
&lt;ul>
&lt;li>定义：5W2H 包括What（目的）、Why（原因）、Who（责任人）、When（时间）、Where（地点）、How（方法）、How Much（程度）。这是一个用于全面分析问题的方法。&lt;/li>
&lt;li>使用场景：项目规划、问题解决、决策制定。&lt;/li>
&lt;li>分类：问题分析&lt;/li>
&lt;/ul>
&lt;h2 id="时间空间分析法">时间空间分析法&lt;/h2>
&lt;ul>
&lt;li>定义：在时间维度，未来同一个人是否会遇到同样的问题；在空间维度，别人是否会遇到同样的问题。&lt;/li>
&lt;li>使用场景：问题分析和复盘&lt;/li>
&lt;/ul>
&lt;h2 id="6-thinking-hats">6 Thinking Hats&lt;/h2>
&lt;ul>
&lt;li>定义：六顶思考帽是一种思维训练工具，通过六种不同颜色的帽子代表不同的思考方式，以促进全面和创造性的讨论。&lt;/li>
&lt;li>使用场景：团队会议、创意工作坊、问题解决。&lt;/li>
&lt;li>分类：创新思维。&lt;/li>
&lt;/ul>
&lt;h2 id="5-whys">5 Whys&lt;/h2>
&lt;ul>
&lt;li>定义：5 Whys是一种通过反复问“为什么”来挖掘问题根本原因的方法。&lt;/li>
&lt;li>使用场景：用于根本原因分析和问题解决。&lt;/li>
&lt;/ul>
&lt;h2 id="7-步成诗法">7 步成诗法&lt;/h2>
&lt;ul>
&lt;li>定义：解决问题的七个步骤，包括问题描述、分解、规划、信息整理、分析论证、建议提出和方案表达。&lt;/li>
&lt;li>使用场景：用于系统化地解决问题。&lt;/li>
&lt;li>分类：问题分析工具。&lt;/li>
&lt;/ul>
&lt;h2 id="scqa-分析法">SCQA 分析法&lt;/h2>
&lt;ul>
&lt;li>定义：SCQA代表情境（Situation）、复杂性（Complication）、问题（Question）、答案（Answer）。&lt;/li>
&lt;li>使用场景：用于结构化思考和沟通，帮助清晰地识别和表述问题。&lt;/li>
&lt;li>分类：问题分析工具。&lt;/li>
&lt;/ul>
&lt;h1 id="决策与规划">决策与规划&lt;/h1>
&lt;h2 id="swot-分析">SWOT 分析&lt;/h2>
&lt;ul>
&lt;li>定义：SWOT代表优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）、威胁（Threats）。这是一种评估项目或企业竞争力的方法。&lt;/li>
&lt;li>使用场景：企业战略规划、市场分析、个人职业规划。&lt;/li>
&lt;li>分类：战略规划&lt;/li>
&lt;/ul>
&lt;h2 id="wbs工作分解结构">WBS（工作分解结构）&lt;/h2>
&lt;ul>
&lt;li>定义：WBS是一种将项目分解成更小的、易于管理的部分的方法。&lt;/li>
&lt;li>使用场景：项目管理、任务分配、复杂任务的分解。&lt;/li>
&lt;li>分类：项目管理&lt;/li>
&lt;/ul>
&lt;h1 id="流程">流程&lt;/h1>
&lt;h2 id="dmaic">DMAIC&lt;/h2>
&lt;ul>
&lt;li>定义：DMAIC是六西格玛管理中的一种改进方法，代表定义（Define）、测量（Measure）、分析（Analyze）、改进（Improve）、控制（Control）。&lt;/li>
&lt;li>使用场景：流程改进、质量管理。&lt;/li>
&lt;li>分类：质量管理。&lt;/li>
&lt;/ul>
&lt;h2 id="lean-methodologies">Lean Methodologies&lt;/h2>
&lt;ul>
&lt;li>定义：精益方法论是一种旨在通过消除浪费和优化流程来提高效率和效果的管理哲学。&lt;/li>
&lt;li>使用场景：流程改进、成本控制。&lt;/li>
&lt;li>分类：流程改进。&lt;/li>
&lt;/ul></description><content>&lt;h1 id="目标设定与管理">目标设定与管理&lt;/h1>
&lt;h2 id="smart-原则">SMART 原则&lt;/h2>
&lt;ul>
&lt;li>定义：SMART 代表具体（Specific）、可衡量（Measurable）、可达成（Attainable）、相关性（Relevant）、时限性（Time-bound）。这是一种帮助个人或团队设定具体、可追踪目标的方法。&lt;/li>
&lt;li>使用场景：在绩效管理中辅助制定绩效目标，也适用于个人工作或项目目标的设定。&lt;/li>
&lt;li>分类：目标管理&lt;/li>
&lt;/ul>
&lt;h2 id="okrobjectives-and-key-results">OKR（Objectives and Key Results）&lt;/h2>
&lt;ul>
&lt;li>定义：OKR是一种目标设定框架，由目标（Objectives）和关键结果（Key Results）组成，旨在确保团队和个人的工作与公司目标一致。&lt;/li>
&lt;li>使用场景：适用于需要跟踪和衡量进展的长期目标和短期目标。&lt;/li>
&lt;li>分类：目标管理。&lt;/li>
&lt;/ul>
&lt;h2 id="bscbalanced-scorecard">BSC（Balanced Scorecard）&lt;/h2>
&lt;ul>
&lt;li>定义：平衡计分卡是一种绩效管理工具，它将组织的愿景和策略转化为一组绩效指标。&lt;/li>
&lt;li>使用场景：用于企业战略规划和绩效管理，帮助组织从财务、客户、内部流程、学习和成长四个维度衡量绩效。&lt;/li>
&lt;li>分类：绩效管理。&lt;/li>
&lt;/ul>
&lt;h2 id="pdca-循环">PDCA 循环&lt;/h2>
&lt;ul>
&lt;li>定义：PDCA 代表计划（Plan）、执行（Do）、检查（Check）、行动（Act）。这是一个持续改进和问题解决的循环过程。&lt;/li>
&lt;li>使用场景：质量管理、生产管理、个人工作流程的持续改进。&lt;/li>
&lt;li>分类：质量管理&lt;/li>
&lt;/ul>
&lt;h1 id="问题分析与解决">问题分析与解决&lt;/h1>
&lt;h2 id="star-法则">STAR 法则&lt;/h2>
&lt;ul>
&lt;li>定义：STAR 代表情境（Situation）、任务（Task）、行动（Action）、结果（Result）。这是一个用于描述特定事件或经历的结构化方法。&lt;/li>
&lt;li>使用场景：面试中回答行为性问题、工作汇报、案例分析、答辩等。&lt;/li>
&lt;li>分类：面试技巧、案例分析&lt;/li>
&lt;/ul>
&lt;h2 id="5w2h-分析法">5W2H 分析法&lt;/h2>
&lt;ul>
&lt;li>定义：5W2H 包括What（目的）、Why（原因）、Who（责任人）、When（时间）、Where（地点）、How（方法）、How Much（程度）。这是一个用于全面分析问题的方法。&lt;/li>
&lt;li>使用场景：项目规划、问题解决、决策制定。&lt;/li>
&lt;li>分类：问题分析&lt;/li>
&lt;/ul>
&lt;h2 id="时间空间分析法">时间空间分析法&lt;/h2>
&lt;ul>
&lt;li>定义：在时间维度，未来同一个人是否会遇到同样的问题；在空间维度，别人是否会遇到同样的问题。&lt;/li>
&lt;li>使用场景：问题分析和复盘&lt;/li>
&lt;/ul>
&lt;h2 id="6-thinking-hats">6 Thinking Hats&lt;/h2>
&lt;ul>
&lt;li>定义：六顶思考帽是一种思维训练工具，通过六种不同颜色的帽子代表不同的思考方式，以促进全面和创造性的讨论。&lt;/li>
&lt;li>使用场景：团队会议、创意工作坊、问题解决。&lt;/li>
&lt;li>分类：创新思维。&lt;/li>
&lt;/ul>
&lt;h2 id="5-whys">5 Whys&lt;/h2>
&lt;ul>
&lt;li>定义：5 Whys是一种通过反复问“为什么”来挖掘问题根本原因的方法。&lt;/li>
&lt;li>使用场景：用于根本原因分析和问题解决。&lt;/li>
&lt;/ul>
&lt;h2 id="7-步成诗法">7 步成诗法&lt;/h2>
&lt;ul>
&lt;li>定义：解决问题的七个步骤，包括问题描述、分解、规划、信息整理、分析论证、建议提出和方案表达。&lt;/li>
&lt;li>使用场景：用于系统化地解决问题。&lt;/li>
&lt;li>分类：问题分析工具。&lt;/li>
&lt;/ul>
&lt;h2 id="scqa-分析法">SCQA 分析法&lt;/h2>
&lt;ul>
&lt;li>定义：SCQA代表情境（Situation）、复杂性（Complication）、问题（Question）、答案（Answer）。&lt;/li>
&lt;li>使用场景：用于结构化思考和沟通，帮助清晰地识别和表述问题。&lt;/li>
&lt;li>分类：问题分析工具。&lt;/li>
&lt;/ul>
&lt;h1 id="决策与规划">决策与规划&lt;/h1>
&lt;h2 id="swot-分析">SWOT 分析&lt;/h2>
&lt;ul>
&lt;li>定义：SWOT代表优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）、威胁（Threats）。这是一种评估项目或企业竞争力的方法。&lt;/li>
&lt;li>使用场景：企业战略规划、市场分析、个人职业规划。&lt;/li>
&lt;li>分类：战略规划&lt;/li>
&lt;/ul>
&lt;h2 id="wbs工作分解结构">WBS（工作分解结构）&lt;/h2>
&lt;ul>
&lt;li>定义：WBS是一种将项目分解成更小的、易于管理的部分的方法。&lt;/li>
&lt;li>使用场景：项目管理、任务分配、复杂任务的分解。&lt;/li>
&lt;li>分类：项目管理&lt;/li>
&lt;/ul>
&lt;h1 id="流程">流程&lt;/h1>
&lt;h2 id="dmaic">DMAIC&lt;/h2>
&lt;ul>
&lt;li>定义：DMAIC是六西格玛管理中的一种改进方法，代表定义（Define）、测量（Measure）、分析（Analyze）、改进（Improve）、控制（Control）。&lt;/li>
&lt;li>使用场景：流程改进、质量管理。&lt;/li>
&lt;li>分类：质量管理。&lt;/li>
&lt;/ul>
&lt;h2 id="lean-methodologies">Lean Methodologies&lt;/h2>
&lt;ul>
&lt;li>定义：精益方法论是一种旨在通过消除浪费和优化流程来提高效率和效果的管理哲学。&lt;/li>
&lt;li>使用场景：流程改进、成本控制。&lt;/li>
&lt;li>分类：流程改进。&lt;/li>
&lt;/ul></content></item><item><title>心经解读 - 背景知识</title><link>https://when.run/cn/posts/heart-sutra-1/</link><pubDate>Sat, 14 Oct 2023 22:55:54 +0800</pubDate><guid>https://when.run/cn/posts/heart-sutra-1/</guid><description>&lt;h2 id="般若波罗蜜多">般若波罗蜜多&lt;/h2>
&lt;p>也称般若波罗蜜&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，“般若”指的是“智慧”，“波罗”指“彼岸”，“蜜”指“到”，“多”是语尾的拖音，译“了”（有时“多”也可省略），译成汉文合起来是“到彼岸了”。所以原词指的是“到彼岸的智慧“。般若波罗蜜多，智慧至彼岸。&lt;/p>
&lt;h2 id="五蕴">五蕴&lt;/h2>
&lt;blockquote>
&lt;p>解读：佛教认为世间一切事物都是由五蕴和合而成，人的身体也是由五蕴和合而成的。&lt;/p>
&lt;/blockquote>
&lt;p>蕴，意义是积聚，五蕴&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>即是五种聚合。五蕴包含了色&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、受&lt;sup id="fnref1:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、想&lt;sup id="fnref2:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、行&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>、识&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>这五种类的法，各个合为一集，都是因缘和合的，它们相续不断的生灭，故五蕴的意思是五种不同的聚合。五蕴也被翻译为五众或五阴。“五众”是五种众多的法聚合在一起；“五阴”是五种法遮盖住我们的智慧之意。在五蕴中，除了第一个色蕴是属物质性的事物现象之外，其余四蕴都属五蕴里的精神现象。&lt;/p>
&lt;h3 id="色蕴">色蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：一切真实存在的，能够感受到（包括看到、听到、闻到、摸到等）的物质，即色蕴。&lt;/p>
&lt;/blockquote>
&lt;p>色蕴&lt;sup id="fnref3:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>即物质的积聚。色是有质碍，占有一定的空间，久后会变坏。色所指的是一切物质，以及一切物质的活动现象。比如：矿物是物质，它肯定是属于色蕴；但是声音，并非物质，是物质所震动的现象，故它也属于色蕴。色蕴包含内色与外色。&lt;/p>
&lt;ul>
&lt;li>内色：就是我们所依靠生活的根身（身躯），也叫&lt;strong>五根&lt;/strong>，包括：眼、耳、鼻、舌、身；&lt;/li>
&lt;li>外色：就是我们所知的外境，也叫 &lt;strong>五境&lt;/strong>，包括：色、声、香、味、触。&lt;/li>
&lt;/ul>
&lt;h3 id="受蕴">受蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：来自于六根六境的感受，前五根（眼、耳、鼻、舌、身）的感受即身受，意根的感受即心受。&lt;/p>
&lt;/blockquote>
&lt;p>受蕴&lt;sup id="fnref4:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>既是领取纳受之意。对于顺境与逆境的领纳感受，它可分为身受和心受。身受由五根和五境所引起，它有苦、乐、舍（不苦不乐）三种感受；心受由意根（六根即五根加上意根）所引起，有忧、喜。固受有苦、乐、舍、忧、喜五种性质。&lt;/p>
&lt;ol>
&lt;li>苦受：领纳逆境，身心逼迫，刺激太强，身心感受到苦。&lt;/li>
&lt;li>乐受：领纳顺境，我们所喜爱的境，身心适悦。&lt;/li>
&lt;li>舍受：领纳中庸性的境，身心处在不苦不乐的感受。&lt;/li>
&lt;li>忧受与喜受：忧受是担心、忧虑种种的事务；喜受就是对事务产生快乐的心情。忧受与喜受是一念一念的心，心心相续而产生，并非由六根而来。比如你想起一件快乐的事情，你内心很快乐，这就是喜爱。苦、乐、舍三受是六根‘接触外境后’，加上烦恼而生起的感受，所以忧、喜是烦恼，苦、乐、舍不是烦恼。&lt;/li>
&lt;/ol>
&lt;p>受蕴是无量无数相续不断的受心所集为一聚。这个受心所是无量无数刹那生灭的苦、乐、舍三种感受，它们生生灭灭不已，称为受心所。&lt;/p>
&lt;h3 id="想蕴">想蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：受蕴的下一阶段，即心理感触、心理活动。受蕴最终都以想蕴存在人体意识中。&lt;/p>
&lt;/blockquote>
&lt;p>想蕴&lt;sup id="fnref5:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>：心于所知境执取形象。也就是看、听、接触东西时，会认定所对的境有一定的相貌，然后为它安立名称，生起认识的心理。&lt;/p>
&lt;p>六根与外境接触，内心构画出种种外境的相状，对外境起决定的心理，并且安立种种的名称，既是所谓名相的安立。这个名相是众生主观的安立，而在这名相中执着有一个实有的个体。&lt;/p>
&lt;p>想蕴跟受一样，也是从六根而来。眼睛接触的境所生的这个想，既是颜色的相貌，称为色相；耳朵分别声音的相貌；鼻子分别气味的相貌；舌头分别味道的相貌；身体分别接触的相貌，那么我们的意则分别心念想的相貌。&lt;/p>
&lt;p>这些种种的相貌都是我们内心把它构画出来的。这个想与受一样重要，因为只要我们在受的同时，我们的意识－－心，就来回不停地在六根那儿作想，由这个想我们分别外境是如此这般，这般如此。在我们的日常生活中，所看、所听到的事事物物，过后心中区别它们，都是由想得来的。&lt;/p>
&lt;h3 id="行蕴">行蕴&lt;/h3>
&lt;blockquote>
&lt;p>还未理解，引用其他解读&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>：产生了苦乐感受的受取作用之后，接着生起的贪欲、嗔恶，或与之不相关涉的其他心理活动。通常的情况，总是对于可悦的事物起贪欲心；对于不可悦的事物，起嗔恶心，但是也有觉得无头痛痒的，或因甲境而想到乙境上去的。&lt;/p>
&lt;/blockquote>
&lt;p>行蕴&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>：“行”是造作之义，行蕴是驱使心造作诸业，所造作的行为有善、恶、无记三种心理，称为心所生法，又称为心所。&lt;/p>
&lt;p>行蕴是很复杂的，我们的心所生的种种心念，称为心所。这些心所除了受与想之外，其余的一切心所生法，这些心的行为（心行）皆是有造作的，并且念念迁流变化，都称为行，这种种的“行”聚合在一起，则称为行蕴。&lt;/p>
&lt;p>在我们的心念中，&lt;strong>除了识、受和想以外，其他的心念都是行&lt;/strong>。这些心会造业，是有造作的。行蕴所生的心是造业的主要力量与原因，因为这些心念驱使我们的身、口、意去造业，所以行蕴是五蕴中造业的主要心理作用。&lt;/p>
&lt;h3 id="识蕴">识蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：或可以理解为认识，对这个世界的认知。&lt;/p>
&lt;/blockquote>
&lt;p>对于所接触的境物，了别识知，即是意念或意识的活动，也即是心的主体。前面的受、想、行三蕴，是心体的现象，识蕴&lt;sup id="fnref1:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>才是心的主宰。故也可将受、想、行的三蕴，称心王所有之法，识蕴便是心王。&lt;/p>
&lt;h3 id="五蕴的关系">五蕴的关系&lt;/h3>
&lt;p>五蕴中的色蕴，分为内色与外色，就是根与境（尘）。尘是所知道的境，根是我们的识依靠它来知道外境。心与境接触的时候，那个接触的心理称为触。触当时能知外境的是识，心、境接触之后，就会连续的生起受、想、行。过后苦、乐、舍三种受即生起。同时心构画种种的形相。而且给它们种种名称，此既是所谓的想。我们安立名言后，加上烦恼，就生起善、恶之心，甚至发动身、口、意去造业，这就是五蕴 色、受、想、行、识之间的关系。&lt;strong>我们的生命就是这样一直连续不断的活动&lt;/strong>。&lt;/p>
&lt;h2 id="舍利子">舍利子&lt;/h2>
&lt;p>心经中的“舍利子”是音译，其实就是舍利弗，是佛陀的十大弟子之一。因为他持戒多闻、敏捷智慧，反应非常快，非常的聪明，有智慧，善解佛法，很善于去了解或者去阐述佛陀的智慧。所以，舍利弗在释迦牟尼佛的十大弟子里，被称为智慧第一。&lt;sup id="fnref1:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="空">空&lt;/h2>
&lt;p>也叫空相&lt;sup id="fnref1:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>，真空的本体，假象、幻象。&lt;/p>
&lt;h2 id="三世诸佛">三世诸佛&lt;/h2>
&lt;p>三世诸佛&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>，指过去、现在、未来这三世的一切诸佛，又叫作“一切诸佛”、“十方佛”、“三世佛”。“诸佛”是指过去、现在、未来的一切佛&lt;/p>
&lt;h2 id="菩提">菩提&lt;/h2>
&lt;p>“菩提” 意思是觉悟、智慧，用以指人忽如睡醒，豁然开悟，突入彻悟途径，顿悟真理，达到超凡脱俗的境界等。菩提是大彻大悟，明心见性，证得了最后的光明的自性，也就是达到了涅槃的程度。涅槃对凡夫来讲是人死了，实际上就是达到了无上菩提。&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="阿耨多罗三藐三菩提">阿耨多罗三藐三菩提&lt;/h2>
&lt;p>无上正等正觉&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>，又作无上正等菩提、无上正等觉、无上正觉，音译为&lt;strong>阿耨多罗三藐三菩提&lt;/strong>、阿耨多罗三耶三菩，意为“至高无上正确彻底的全面觉悟”，旧译作无上正真道。是指佛教修行的最高觉悟、最高涅槃境界，证得此者与成佛无异。&lt;/p>
&lt;hr>
&lt;h2 id="引用参考">引用参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E8%88%AC%E8%8B%A5%E6%B3%A2%E7%BD%97%E8%9C%9C/82620">般若波罗蜜-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E4%BA%94%E8%95%B4">五蕴-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_15422.html">常识｜五蕴：色、受、想、行、识（上）&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref2:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref3:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref4:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref5:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://www.163.com/dy/article/HV3G6A9A05561K02.html">《心经》里的“舍利子”，他代表了什么？&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E7%A9%BA%E7%9B%B8/6862922">空相-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_13089.html">常识｜何谓五蕴&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_15433.html">常识｜五蕴：色、受、想、行、识（下）&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>&lt;a href="http://www.oliannews.com/xsjl/2019/01-20/263485.shtml">佛教中的“三世诸佛”指的都是谁？&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%B8%89%E4%B8%96%E4%BD%9B">三世佛-维基百科&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E8%8F%A9%E6%8F%90/934?fromModule=lemma_search-box">菩提-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>&lt;a href="https://zh.wikipedia.org/zh-cn/%E7%84%A1%E4%B8%8A%E6%AD%A3%E7%AD%89%E6%AD%A3%E8%A6%BA">无上正等正觉-维基百科&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><content>&lt;h2 id="般若波罗蜜多">般若波罗蜜多&lt;/h2>
&lt;p>也称般若波罗蜜&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，“般若”指的是“智慧”，“波罗”指“彼岸”，“蜜”指“到”，“多”是语尾的拖音，译“了”（有时“多”也可省略），译成汉文合起来是“到彼岸了”。所以原词指的是“到彼岸的智慧“。般若波罗蜜多，智慧至彼岸。&lt;/p>
&lt;h2 id="五蕴">五蕴&lt;/h2>
&lt;blockquote>
&lt;p>解读：佛教认为世间一切事物都是由五蕴和合而成，人的身体也是由五蕴和合而成的。&lt;/p>
&lt;/blockquote>
&lt;p>蕴，意义是积聚，五蕴&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>即是五种聚合。五蕴包含了色&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、受&lt;sup id="fnref1:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、想&lt;sup id="fnref2:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、行&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>、识&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>这五种类的法，各个合为一集，都是因缘和合的，它们相续不断的生灭，故五蕴的意思是五种不同的聚合。五蕴也被翻译为五众或五阴。“五众”是五种众多的法聚合在一起；“五阴”是五种法遮盖住我们的智慧之意。在五蕴中，除了第一个色蕴是属物质性的事物现象之外，其余四蕴都属五蕴里的精神现象。&lt;/p>
&lt;h3 id="色蕴">色蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：一切真实存在的，能够感受到（包括看到、听到、闻到、摸到等）的物质，即色蕴。&lt;/p>
&lt;/blockquote>
&lt;p>色蕴&lt;sup id="fnref3:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>即物质的积聚。色是有质碍，占有一定的空间，久后会变坏。色所指的是一切物质，以及一切物质的活动现象。比如：矿物是物质，它肯定是属于色蕴；但是声音，并非物质，是物质所震动的现象，故它也属于色蕴。色蕴包含内色与外色。&lt;/p>
&lt;ul>
&lt;li>内色：就是我们所依靠生活的根身（身躯），也叫&lt;strong>五根&lt;/strong>，包括：眼、耳、鼻、舌、身；&lt;/li>
&lt;li>外色：就是我们所知的外境，也叫 &lt;strong>五境&lt;/strong>，包括：色、声、香、味、触。&lt;/li>
&lt;/ul>
&lt;h3 id="受蕴">受蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：来自于六根六境的感受，前五根（眼、耳、鼻、舌、身）的感受即身受，意根的感受即心受。&lt;/p>
&lt;/blockquote>
&lt;p>受蕴&lt;sup id="fnref4:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>既是领取纳受之意。对于顺境与逆境的领纳感受，它可分为身受和心受。身受由五根和五境所引起，它有苦、乐、舍（不苦不乐）三种感受；心受由意根（六根即五根加上意根）所引起，有忧、喜。固受有苦、乐、舍、忧、喜五种性质。&lt;/p>
&lt;ol>
&lt;li>苦受：领纳逆境，身心逼迫，刺激太强，身心感受到苦。&lt;/li>
&lt;li>乐受：领纳顺境，我们所喜爱的境，身心适悦。&lt;/li>
&lt;li>舍受：领纳中庸性的境，身心处在不苦不乐的感受。&lt;/li>
&lt;li>忧受与喜受：忧受是担心、忧虑种种的事务；喜受就是对事务产生快乐的心情。忧受与喜受是一念一念的心，心心相续而产生，并非由六根而来。比如你想起一件快乐的事情，你内心很快乐，这就是喜爱。苦、乐、舍三受是六根‘接触外境后’，加上烦恼而生起的感受，所以忧、喜是烦恼，苦、乐、舍不是烦恼。&lt;/li>
&lt;/ol>
&lt;p>受蕴是无量无数相续不断的受心所集为一聚。这个受心所是无量无数刹那生灭的苦、乐、舍三种感受，它们生生灭灭不已，称为受心所。&lt;/p>
&lt;h3 id="想蕴">想蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：受蕴的下一阶段，即心理感触、心理活动。受蕴最终都以想蕴存在人体意识中。&lt;/p>
&lt;/blockquote>
&lt;p>想蕴&lt;sup id="fnref5:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>：心于所知境执取形象。也就是看、听、接触东西时，会认定所对的境有一定的相貌，然后为它安立名称，生起认识的心理。&lt;/p>
&lt;p>六根与外境接触，内心构画出种种外境的相状，对外境起决定的心理，并且安立种种的名称，既是所谓名相的安立。这个名相是众生主观的安立，而在这名相中执着有一个实有的个体。&lt;/p>
&lt;p>想蕴跟受一样，也是从六根而来。眼睛接触的境所生的这个想，既是颜色的相貌，称为色相；耳朵分别声音的相貌；鼻子分别气味的相貌；舌头分别味道的相貌；身体分别接触的相貌，那么我们的意则分别心念想的相貌。&lt;/p>
&lt;p>这些种种的相貌都是我们内心把它构画出来的。这个想与受一样重要，因为只要我们在受的同时，我们的意识－－心，就来回不停地在六根那儿作想，由这个想我们分别外境是如此这般，这般如此。在我们的日常生活中，所看、所听到的事事物物，过后心中区别它们，都是由想得来的。&lt;/p>
&lt;h3 id="行蕴">行蕴&lt;/h3>
&lt;blockquote>
&lt;p>还未理解，引用其他解读&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>：产生了苦乐感受的受取作用之后，接着生起的贪欲、嗔恶，或与之不相关涉的其他心理活动。通常的情况，总是对于可悦的事物起贪欲心；对于不可悦的事物，起嗔恶心，但是也有觉得无头痛痒的，或因甲境而想到乙境上去的。&lt;/p>
&lt;/blockquote>
&lt;p>行蕴&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>：“行”是造作之义，行蕴是驱使心造作诸业，所造作的行为有善、恶、无记三种心理，称为心所生法，又称为心所。&lt;/p>
&lt;p>行蕴是很复杂的，我们的心所生的种种心念，称为心所。这些心所除了受与想之外，其余的一切心所生法，这些心的行为（心行）皆是有造作的，并且念念迁流变化，都称为行，这种种的“行”聚合在一起，则称为行蕴。&lt;/p>
&lt;p>在我们的心念中，&lt;strong>除了识、受和想以外，其他的心念都是行&lt;/strong>。这些心会造业，是有造作的。行蕴所生的心是造业的主要力量与原因，因为这些心念驱使我们的身、口、意去造业，所以行蕴是五蕴中造业的主要心理作用。&lt;/p>
&lt;h3 id="识蕴">识蕴&lt;/h3>
&lt;blockquote>
&lt;p>解读：或可以理解为认识，对这个世界的认知。&lt;/p>
&lt;/blockquote>
&lt;p>对于所接触的境物，了别识知，即是意念或意识的活动，也即是心的主体。前面的受、想、行三蕴，是心体的现象，识蕴&lt;sup id="fnref1:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>才是心的主宰。故也可将受、想、行的三蕴，称心王所有之法，识蕴便是心王。&lt;/p>
&lt;h3 id="五蕴的关系">五蕴的关系&lt;/h3>
&lt;p>五蕴中的色蕴，分为内色与外色，就是根与境（尘）。尘是所知道的境，根是我们的识依靠它来知道外境。心与境接触的时候，那个接触的心理称为触。触当时能知外境的是识，心、境接触之后，就会连续的生起受、想、行。过后苦、乐、舍三种受即生起。同时心构画种种的形相。而且给它们种种名称，此既是所谓的想。我们安立名言后，加上烦恼，就生起善、恶之心，甚至发动身、口、意去造业，这就是五蕴 色、受、想、行、识之间的关系。&lt;strong>我们的生命就是这样一直连续不断的活动&lt;/strong>。&lt;/p>
&lt;h2 id="舍利子">舍利子&lt;/h2>
&lt;p>心经中的“舍利子”是音译，其实就是舍利弗，是佛陀的十大弟子之一。因为他持戒多闻、敏捷智慧，反应非常快，非常的聪明，有智慧，善解佛法，很善于去了解或者去阐述佛陀的智慧。所以，舍利弗在释迦牟尼佛的十大弟子里，被称为智慧第一。&lt;sup id="fnref1:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="空">空&lt;/h2>
&lt;p>也叫空相&lt;sup id="fnref1:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>，真空的本体，假象、幻象。&lt;/p>
&lt;h2 id="三世诸佛">三世诸佛&lt;/h2>
&lt;p>三世诸佛&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>，指过去、现在、未来这三世的一切诸佛，又叫作“一切诸佛”、“十方佛”、“三世佛”。“诸佛”是指过去、现在、未来的一切佛&lt;/p>
&lt;h2 id="菩提">菩提&lt;/h2>
&lt;p>“菩提” 意思是觉悟、智慧，用以指人忽如睡醒，豁然开悟，突入彻悟途径，顿悟真理，达到超凡脱俗的境界等。菩提是大彻大悟，明心见性，证得了最后的光明的自性，也就是达到了涅槃的程度。涅槃对凡夫来讲是人死了，实际上就是达到了无上菩提。&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="阿耨多罗三藐三菩提">阿耨多罗三藐三菩提&lt;/h2>
&lt;p>无上正等正觉&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>，又作无上正等菩提、无上正等觉、无上正觉，音译为&lt;strong>阿耨多罗三藐三菩提&lt;/strong>、阿耨多罗三耶三菩，意为“至高无上正确彻底的全面觉悟”，旧译作无上正真道。是指佛教修行的最高觉悟、最高涅槃境界，证得此者与成佛无异。&lt;/p>
&lt;hr>
&lt;h2 id="引用参考">引用参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E8%88%AC%E8%8B%A5%E6%B3%A2%E7%BD%97%E8%9C%9C/82620">般若波罗蜜-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E4%BA%94%E8%95%B4">五蕴-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_15422.html">常识｜五蕴：色、受、想、行、识（上）&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref2:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref3:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref4:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref5:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://www.163.com/dy/article/HV3G6A9A05561K02.html">《心经》里的“舍利子”，他代表了什么？&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E7%A9%BA%E7%9B%B8/6862922">空相-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_13089.html">常识｜何谓五蕴&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>&lt;a href="https://www.lingyinsi.org/detail_15433.html">常识｜五蕴：色、受、想、行、识（下）&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>&lt;a href="http://www.oliannews.com/xsjl/2019/01-20/263485.shtml">佛教中的“三世诸佛”指的都是谁？&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%B8%89%E4%B8%96%E4%BD%9B">三世佛-维基百科&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>&lt;a href="https://baike.baidu.com/item/%E8%8F%A9%E6%8F%90/934?fromModule=lemma_search-box">菩提-百度百科&lt;/a>&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>&lt;a href="https://zh.wikipedia.org/zh-cn/%E7%84%A1%E4%B8%8A%E6%AD%A3%E7%AD%89%E6%AD%A3%E8%A6%BA">无上正等正觉-维基百科&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>读书</title><link>https://when.run/cn/posts/read/</link><pubDate>Sat, 22 Apr 2023 18:05:41 +0800</pubDate><guid>https://when.run/cn/posts/read/</guid><description>&lt;blockquote>
&lt;p>摘抄自老舍《茶馆》&lt;/p>
&lt;/blockquote>
&lt;p>若是学者才准念书，我就什么也不要说了。大概书不是专为学者预备的；那么，我可要多嘴了。&lt;/p>
&lt;p>从我一生下来直到如今，没人盼望我成个学者；我永远喜欢服从多数人的意见。可是我爱念书。&lt;/p>
&lt;p>书的种类很多，能和我有交情的可很少。我有决定念什么的全权；自幼儿我就会逃学，楞挨板子也不肯说我爱《三字经》和《百家姓》。对，《三字经》便可以代表一类——这类书，据我看，顶好在判了无期徒刑以后去念，反正活着也没多大味儿。这类书可真不少，不知道为什么；也许是犯无期徒刑罪的太多；要不然便是太少——我自己就常想杀些写这类书的人。&lt;/p>
&lt;p>我可是还没杀过一个，一来是因为——我才明白过来——写这样书的人敢情有好些已经死了，比如写《尚书》的那位李二哥。二来是因为现在还有些人专爱念这类书，我不便得罪人太多了。顶好，我看是不管别人；我不爱念的就不动好了。好在，我爸爸没希望我成个学者。&lt;/p>
&lt;p>第二类书也与咱无缘：书上满是公式，没有一个“然而”和“所以”。据说，这类书里藏着打开宇宙秘密的小金钥匙。我倒久想明白点真理，如地是圆的之类；可是这种书别扭，它老瞪着我。书不老老实实的当本书，瞪人干吗呀？我不能受这个气！有一回，一位朋友给我一本《相对论原理》，他说：明白这个就什么都明白了。我下了决心去念这本宝贝书。读了两个“配纸”，我遇上了一个公式。我跟它“相对”了两点多钟！往后边一看，公式还多了去啦！我知道和它们“相对”下去，它们也许不在乎，我还活着不呢？&lt;/p>
&lt;p>可是我对这类书，老有点敬意。这类书和第一类有些不同，我看得出。第一类书不是没法懂，而是懂了以后使我更糊涂。以我现在的理解力——比上我七岁的时候，我现在满可以作圣人了——我能明白“人之初，性本善”。明白完了，紧跟着就糊涂了；昨儿个晚上，我还挨了小女儿——玫瑰唇的小天使——一个嘴巴。我知道这个小天使性本不善，她才两岁。第二类书根本就看不懂，可是人家的纸上没印着一句废话；懂不懂的，人家不闹玄虚，它瞪我，或者我是该瞪。我的心这么一软，便把它好好放在书架上；好打好散，别太伤了和气。这要说到第三类书了。其实这不该算一类；就这么算吧，顺嘴。这类书是这样的：名气挺大，念过的人总不肯说它坏，没念过的人老怪害羞的说将要念。譬如说《元曲》，太炎“先生”的文章，罗马的悲剧，辛克莱的小说，《大公报》——不知是哪儿出版的一本书——都算在这类里，这些书我也都拿起来过，随手便又放下了。这里还就属那本《大公报》有点劲。我不害羞，永远不说将要念。好些书的广告与威风是很大的，我只能承认那些广告作得不错，谁管它威风不威风呢。&lt;/p>
&lt;p>“类”还多着呢，不便再说；有上面的三项也就足以证明我怎样的不高明了。该说读的方法。怎样读书，在这里，是个自决的问题；我说我的，没勉强谁跟我学。第一，我读书没系统。借着什么，买着什么，遇着什么，就读什么。不懂的放下，使我糊涂的放下，没趣味的放下，不客气。我不能叫书管着我。&lt;/p>
&lt;p>第二，读得很快，而不记住。书要都叫我记住，还要书干吗？书应该记住自己。对我，最讨厌的发问是：“那个典故是哪儿的呢？”“那句书是怎么来着？”我永不回答这样的考问，即使我记得。我又不是印刷器养的，管你这一套！&lt;/p>
&lt;p>读得快，因为我有时候跳过几页去。不合我的意，我就练习跳远。书要是不服气的话，来跳我呀！看侦探小说的时候，我先看最后的几页，省事。&lt;/p>
&lt;p>第三，读完一本书，没有批评，谁也不告诉。一告诉就糟：“嘿，你读《啼笑因缘》？”要大家都不读《啼笑因缘》，人家写它干吗呢？一批评就糟：“尊家这点意见？”我不惹气。读完一本书再打通儿架，不上算。我有我的爱与不爱，存在我自己心里。我爱念什么就念，有什么心得我自己知道，这是种享受，虽然显得自私一点。&lt;/p>
&lt;p>再说呢，我读书似乎只要求一点灵感。“印象甚佳”便是好书，我没工夫去细细分析它，所以根本便不能批评。“印象甚佳”有时候并不是全书的，而是书中的一段最入我的味；因为这一段使我对这全书有了好感；其实这一段的美或者正足以破坏了全体的美，但是我不去管；有一段叫我喜欢两天的，我就感谢不尽。因此，设若我真去批评，大概是高明不了。&lt;/p>
&lt;p>第四，我不读自己的书，不愿谈论自己的书。“儿子是自己的好”，我还不晓得，因为自己还没有过儿子。有个小女儿，女儿能不能代表儿子，就不得而知。“老婆是别人的好”，我也不敢加以拥护，特别是在家里。但是我准知道，书是别人的好。别人的书自然未必都好，可是至少给我一点我不知道的东西。自己的，一提都头疼！自己的书，和自己的运气，好像永远是一对儿累赘。&lt;/p>
&lt;p>第五，哼，算了吧。&lt;/p></description><content>&lt;blockquote>
&lt;p>摘抄自老舍《茶馆》&lt;/p>
&lt;/blockquote>
&lt;p>若是学者才准念书，我就什么也不要说了。大概书不是专为学者预备的；那么，我可要多嘴了。&lt;/p>
&lt;p>从我一生下来直到如今，没人盼望我成个学者；我永远喜欢服从多数人的意见。可是我爱念书。&lt;/p>
&lt;p>书的种类很多，能和我有交情的可很少。我有决定念什么的全权；自幼儿我就会逃学，楞挨板子也不肯说我爱《三字经》和《百家姓》。对，《三字经》便可以代表一类——这类书，据我看，顶好在判了无期徒刑以后去念，反正活着也没多大味儿。这类书可真不少，不知道为什么；也许是犯无期徒刑罪的太多；要不然便是太少——我自己就常想杀些写这类书的人。&lt;/p>
&lt;p>我可是还没杀过一个，一来是因为——我才明白过来——写这样书的人敢情有好些已经死了，比如写《尚书》的那位李二哥。二来是因为现在还有些人专爱念这类书，我不便得罪人太多了。顶好，我看是不管别人；我不爱念的就不动好了。好在，我爸爸没希望我成个学者。&lt;/p>
&lt;p>第二类书也与咱无缘：书上满是公式，没有一个“然而”和“所以”。据说，这类书里藏着打开宇宙秘密的小金钥匙。我倒久想明白点真理，如地是圆的之类；可是这种书别扭，它老瞪着我。书不老老实实的当本书，瞪人干吗呀？我不能受这个气！有一回，一位朋友给我一本《相对论原理》，他说：明白这个就什么都明白了。我下了决心去念这本宝贝书。读了两个“配纸”，我遇上了一个公式。我跟它“相对”了两点多钟！往后边一看，公式还多了去啦！我知道和它们“相对”下去，它们也许不在乎，我还活着不呢？&lt;/p>
&lt;p>可是我对这类书，老有点敬意。这类书和第一类有些不同，我看得出。第一类书不是没法懂，而是懂了以后使我更糊涂。以我现在的理解力——比上我七岁的时候，我现在满可以作圣人了——我能明白“人之初，性本善”。明白完了，紧跟着就糊涂了；昨儿个晚上，我还挨了小女儿——玫瑰唇的小天使——一个嘴巴。我知道这个小天使性本不善，她才两岁。第二类书根本就看不懂，可是人家的纸上没印着一句废话；懂不懂的，人家不闹玄虚，它瞪我，或者我是该瞪。我的心这么一软，便把它好好放在书架上；好打好散，别太伤了和气。这要说到第三类书了。其实这不该算一类；就这么算吧，顺嘴。这类书是这样的：名气挺大，念过的人总不肯说它坏，没念过的人老怪害羞的说将要念。譬如说《元曲》，太炎“先生”的文章，罗马的悲剧，辛克莱的小说，《大公报》——不知是哪儿出版的一本书——都算在这类里，这些书我也都拿起来过，随手便又放下了。这里还就属那本《大公报》有点劲。我不害羞，永远不说将要念。好些书的广告与威风是很大的，我只能承认那些广告作得不错，谁管它威风不威风呢。&lt;/p>
&lt;p>“类”还多着呢，不便再说；有上面的三项也就足以证明我怎样的不高明了。该说读的方法。怎样读书，在这里，是个自决的问题；我说我的，没勉强谁跟我学。第一，我读书没系统。借着什么，买着什么，遇着什么，就读什么。不懂的放下，使我糊涂的放下，没趣味的放下，不客气。我不能叫书管着我。&lt;/p>
&lt;p>第二，读得很快，而不记住。书要都叫我记住，还要书干吗？书应该记住自己。对我，最讨厌的发问是：“那个典故是哪儿的呢？”“那句书是怎么来着？”我永不回答这样的考问，即使我记得。我又不是印刷器养的，管你这一套！&lt;/p>
&lt;p>读得快，因为我有时候跳过几页去。不合我的意，我就练习跳远。书要是不服气的话，来跳我呀！看侦探小说的时候，我先看最后的几页，省事。&lt;/p>
&lt;p>第三，读完一本书，没有批评，谁也不告诉。一告诉就糟：“嘿，你读《啼笑因缘》？”要大家都不读《啼笑因缘》，人家写它干吗呢？一批评就糟：“尊家这点意见？”我不惹气。读完一本书再打通儿架，不上算。我有我的爱与不爱，存在我自己心里。我爱念什么就念，有什么心得我自己知道，这是种享受，虽然显得自私一点。&lt;/p>
&lt;p>再说呢，我读书似乎只要求一点灵感。“印象甚佳”便是好书，我没工夫去细细分析它，所以根本便不能批评。“印象甚佳”有时候并不是全书的，而是书中的一段最入我的味；因为这一段使我对这全书有了好感；其实这一段的美或者正足以破坏了全体的美，但是我不去管；有一段叫我喜欢两天的，我就感谢不尽。因此，设若我真去批评，大概是高明不了。&lt;/p>
&lt;p>第四，我不读自己的书，不愿谈论自己的书。“儿子是自己的好”，我还不晓得，因为自己还没有过儿子。有个小女儿，女儿能不能代表儿子，就不得而知。“老婆是别人的好”，我也不敢加以拥护，特别是在家里。但是我准知道，书是别人的好。别人的书自然未必都好，可是至少给我一点我不知道的东西。自己的，一提都头疼！自己的书，和自己的运气，好像永远是一对儿累赘。&lt;/p>
&lt;p>第五，哼，算了吧。&lt;/p></content></item><item><title>如何平稳的将 Elasticsearch 5.x 集群迁移到 Elasticsearch 7.x</title><link>https://when.run/cn/posts/elasticsearch-upgrade/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/elasticsearch-upgrade/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>公司的内容搜索业务主要基于 Elasticsearch 做的，老集群已经有五六年的历史，版本停留在了 5.6, 集群内的 document 数约有 20 亿的规模，磁盘占用不到 500 GB。&lt;/p>
&lt;p>需要升级到新版本 es 的主要原因有以下几个：&lt;/p>
&lt;ol>
&lt;li>前段时间偶发性的集群故障，导致崩溃，排查发现疑似版本 bug&lt;/li>
&lt;li>Elasticsearch 7.x 带来了一系列优化，包括性能有不小的提升&lt;/li>
&lt;/ol>
&lt;h2 id="升级方案调研">升级方案调研&lt;/h2>
&lt;h4 id="rolling-upgrades">Rolling upgrades&lt;/h4>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html">rolling upgrades&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>由于旧集群版本为 5.x ，需要升级到的版本为 7.x，中间横跨两个大版本，根据 elastic 官方建议的升级 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html">rolling upgrade&lt;/a> 步骤，中间需要两次 rolling upgrade，分别为：&lt;/p>
&lt;ol>
&lt;li>From 5.x to 5.6&lt;/li>
&lt;li>From 5.6 to 6.8 (&lt;strong>rolling upgrade&lt;/strong>)&lt;/li>
&lt;li>From 6.8 to 7.x (&lt;strong>rolling upgrade&lt;/strong>)&lt;/li>
&lt;/ol>
&lt;p>升级过程中，还需要给集群设置一堆选项，这个过程看似很平滑，貌似可以做到 graceful shutdown，但是实际是不可逆的，中间任何一个步骤出错都很难立马恢复到升级前的状态。搜索服务需要高可用，而这些操作都是直接对线上集群进行操作，风险极大，一不小心可能会导致集群故障。因此这个升级方案不可行。&lt;/p>
&lt;h4 id="新集群--新索引">新集群 &amp;amp; 新索引&lt;/h4>
&lt;p>除了对原集群 rolling upgrade，还有一种万无一失的升级方案，那就是直接开启一个 Elasticsearch 7.x 版本的新集群，集群 ready 之后，再把老的索引重建到新集群。一切准备好之后，还可以进行压测，对比性能、数据差异，并且全程不影响服务的可用性。具体升级流程如下：&lt;/p>
&lt;ol>
&lt;li>搭建新集群，尽量保持配置与老集群一致。比如如果有 ik 插件，那么需要保证 ik 的词典文件与老集群一致&lt;/li>
&lt;li>新建索引。这一步的目的是方便后面的索引能够同步双写到新老两个集群。同时建索引时需要注意，es7 已经废弃了 mapping 里的 document type，mapping 不再需要指定 type 了&lt;/li>
&lt;li>索引双写。第二步已经将索引在新集群中建好了，这里在业务代码中开始双写，保证新增的 document 能够与老集群的索引一致&lt;/li>
&lt;li>全量索引。新增索引一致后，存量的 document 也需要一致，因此需要把存量的 doc 重新全部导入到新集群内。这一步官方提供了一个 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote">reindex from remote&lt;/a>，但是实际操作后发现，reindex 后，mapping 和 settings 会有出入，并且不确定这个操作对老集群的压力大不大，因此还是决定跑下脚本人工重建&lt;/li>
&lt;li>线上测试，包括性能测试、稳定性观察、数据比对等&lt;/li>
&lt;li>停掉索引双写&lt;/li>
&lt;li>下线老集群，全面覆盖新集群&lt;/li>
&lt;/ol>
&lt;h2 id="测试新集群">测试新集群&lt;/h2>
&lt;p>新集群准备好之后，需要进行一些必要的测试，比如：性能测试、数据比对、老的查询语句兼容性测试。&lt;/p></description><content>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>公司的内容搜索业务主要基于 Elasticsearch 做的，老集群已经有五六年的历史，版本停留在了 5.6, 集群内的 document 数约有 20 亿的规模，磁盘占用不到 500 GB。&lt;/p>
&lt;p>需要升级到新版本 es 的主要原因有以下几个：&lt;/p>
&lt;ol>
&lt;li>前段时间偶发性的集群故障，导致崩溃，排查发现疑似版本 bug&lt;/li>
&lt;li>Elasticsearch 7.x 带来了一系列优化，包括性能有不小的提升&lt;/li>
&lt;/ol>
&lt;h2 id="升级方案调研">升级方案调研&lt;/h2>
&lt;h4 id="rolling-upgrades">Rolling upgrades&lt;/h4>
&lt;blockquote>
&lt;p>官方文档：&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html">rolling upgrades&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>由于旧集群版本为 5.x ，需要升级到的版本为 7.x，中间横跨两个大版本，根据 elastic 官方建议的升级 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html">rolling upgrade&lt;/a> 步骤，中间需要两次 rolling upgrade，分别为：&lt;/p>
&lt;ol>
&lt;li>From 5.x to 5.6&lt;/li>
&lt;li>From 5.6 to 6.8 (&lt;strong>rolling upgrade&lt;/strong>)&lt;/li>
&lt;li>From 6.8 to 7.x (&lt;strong>rolling upgrade&lt;/strong>)&lt;/li>
&lt;/ol>
&lt;p>升级过程中，还需要给集群设置一堆选项，这个过程看似很平滑，貌似可以做到 graceful shutdown，但是实际是不可逆的，中间任何一个步骤出错都很难立马恢复到升级前的状态。搜索服务需要高可用，而这些操作都是直接对线上集群进行操作，风险极大，一不小心可能会导致集群故障。因此这个升级方案不可行。&lt;/p>
&lt;h4 id="新集群--新索引">新集群 &amp;amp; 新索引&lt;/h4>
&lt;p>除了对原集群 rolling upgrade，还有一种万无一失的升级方案，那就是直接开启一个 Elasticsearch 7.x 版本的新集群，集群 ready 之后，再把老的索引重建到新集群。一切准备好之后，还可以进行压测，对比性能、数据差异，并且全程不影响服务的可用性。具体升级流程如下：&lt;/p>
&lt;ol>
&lt;li>搭建新集群，尽量保持配置与老集群一致。比如如果有 ik 插件，那么需要保证 ik 的词典文件与老集群一致&lt;/li>
&lt;li>新建索引。这一步的目的是方便后面的索引能够同步双写到新老两个集群。同时建索引时需要注意，es7 已经废弃了 mapping 里的 document type，mapping 不再需要指定 type 了&lt;/li>
&lt;li>索引双写。第二步已经将索引在新集群中建好了，这里在业务代码中开始双写，保证新增的 document 能够与老集群的索引一致&lt;/li>
&lt;li>全量索引。新增索引一致后，存量的 document 也需要一致，因此需要把存量的 doc 重新全部导入到新集群内。这一步官方提供了一个 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote">reindex from remote&lt;/a>，但是实际操作后发现，reindex 后，mapping 和 settings 会有出入，并且不确定这个操作对老集群的压力大不大，因此还是决定跑下脚本人工重建&lt;/li>
&lt;li>线上测试，包括性能测试、稳定性观察、数据比对等&lt;/li>
&lt;li>停掉索引双写&lt;/li>
&lt;li>下线老集群，全面覆盖新集群&lt;/li>
&lt;/ol>
&lt;h2 id="测试新集群">测试新集群&lt;/h2>
&lt;p>新集群准备好之后，需要进行一些必要的测试，比如：性能测试、数据比对、老的查询语句兼容性测试。&lt;/p>
&lt;h4 id="性能测试">性能测试&lt;/h4>
&lt;p>性能测试可以挑拣一个业务代码里最常用的查询语句，然后进行压测。比如我这里使用 wrk 压测一个最简单的全文搜索&lt;/p>
&lt;pre tabindex="0">&lt;code>// dsl.lua 文件内容
wrk.method = &amp;#34;GET&amp;#34;
wrk.body = [[{
&amp;#34;query&amp;#34;:{
&amp;#34;match&amp;#34;:{
&amp;#34;name&amp;#34;:{
&amp;#34;query&amp;#34;:&amp;#34;烘焙&amp;#34;
}
}
},
&amp;#34;size&amp;#34;:100
}]]
wrk.headers[&amp;#34;Content-Type&amp;#34;] = &amp;#34;application/json&amp;#34;
&lt;/code>&lt;/pre>&lt;p>压测命令：&lt;/p>
&lt;pre tabindex="0">&lt;code>wrk -t10 -c10 -d10s --script=dsl.lua http://elasticsearch-address:9200/you_index/_search
&lt;/code>&lt;/pre>&lt;p>结果示例：&lt;/p>
&lt;pre tabindex="0">&lt;code>Running 10s test @ http://elasticsearch-address:9200/you_index/_search
10 threads and 10 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 8.31ms 2.12ms 35.71ms 75.93%
Req/Sec 121.09 12.97 151.00 78.10%
12068 requests in 10.01s, 3.80GB read
Requests/sec: 1205.70
Transfer/sec: 388.64MB
&lt;/code>&lt;/pre>&lt;p>可以适当调整压测参数，以及查询语句，通过比对 wrk 输出的 Avg latency 得出性能差异的结论。&lt;/p>
&lt;h4 id="数据比对">数据比对&lt;/h4>
&lt;p>与性能压测类似，找一些业务常用的查询语句，分别对两个集群查询结果采样，比对搜出来的结果是否有差异，依次判断索引是否有差异。&lt;/p>
&lt;p>业务数据测试的同时，还需要测试插件加载是否与老集群一致，比如 ik 的词典文件是否正常加载，通常可以使用 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">&lt;code>/index/_analyze&lt;/code>&lt;/a> 接口来进行测试，并比对结果是否一致&lt;/p>
&lt;h4 id="诡异的毛刺">诡异的毛刺&lt;/h4>
&lt;p>在将索引迁移到新集群后，性能监控发现， 搜索请求经常性的出现毛刺，而且看起来是有规律的毛刺，如果 30s 内没有 search 请求，那么下一次必然会出现一根毛刺
&lt;img alt="es-latency" src="https://when.run/image/es_latency.png">&lt;/p>
&lt;p>这个问题困扰了很久，排查思路如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先查看是否为 SDK 的问题，是不是客户端到 es server 的长连接断了，导致 30s 后需要重新建立长连接，调长链接时间后发现并未改善&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来看索引的 &lt;code>_stats&lt;/code> 信息，发现 &lt;code>docs.deleted&lt;/code> 特别多。产生这么多 deleted 的原因可以解释，因为一个 update 操作等于一个 create + 一个 delete，创建新 doc，标记老 doc 为 deleted。但是在经过一段时间之后，merge 会把老的 segment 给合并掉，deleted 的 doc 也一并被清理了，但是这个指标却没有见变少，一直在增加，此时怀疑是 merge 流程的问题。是否 merge 未正常工作。
&lt;img alt="docs.deleted" src="https://when.run/image/docs_deleted.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继续看索引的 &lt;code>_stats&lt;/code> 信息，发现 &lt;code>refresh&lt;/code> 数非常奇怪，默认 &lt;code>refresh_interval&lt;/code> 是 1s，也就是正常情况下是每秒刷新一次，refresh.total 也就是索引创建到当前时间的秒数，而几天前创建的索引，现在却只 refresh 了800+次，那么是否跟这个没有 refresh 有关系呢？为了验证这个问题，手动跑个脚本，在后台不间断的发送 search 请求，发现开始 refresh 了，毛刺也消失了，说明问题出在了 refresh 上面，出于某些原因没有正常的执行 refresh
&lt;img alt="refresh.total" src="https://when.run/image/refresh_total.png">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在一番查找之后，在 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-refresh-interval-setting">es 文档&lt;/a> 的 &lt;code>refresh_interval&lt;/code> 字段解释里发现这么一句话，如果没有显示的指定 &lt;code>refresh_interval&lt;/code>，那么如果 30s 内没有 search 请求来，会跳过 refresh 步骤，直到有 search 请求来时，才会触发 refresh，并等 refresh 完之后才开始处理 search 请求。这也就能解释为什么 30s 没有搜索流量就会出现一根毛刺了。当手动给索引指定 &lt;code>refresh_interval&lt;/code> 之后，默认行为就变得和老版本一样，不再跳过 refresh，毛刺也就消失了。在 elasticsearch 7.0 的 &lt;a href="https://www.elastic.co/cn/blog/elasticsearch-7-0-0-released">release note&lt;/a> 里也提到了：
&lt;img alt="refresh.doc" src="https://when.run/image/refresh_interval_doc.png">
&lt;img alt="release" src="https://when.run/image/es7_release.png">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="兼容性测试">兼容性测试&lt;/h4>
&lt;p>由于两个集群版本跨度比较大，容易出乌龙。比如下面这个 DSL，在 es 5.x 和 es7.x 两个版本的搜索结果迥然不同。&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;query&amp;#34;: {
&amp;#34;bool&amp;#34; : {
&amp;#34;should&amp;#34; : [
{ &amp;#34;term&amp;#34; : { &amp;#34;tags&amp;#34; : &amp;#34;env1&amp;#34; } },
{ &amp;#34;term&amp;#34; : { &amp;#34;tags&amp;#34; : &amp;#34;deployed&amp;#34; } }
]
}
}
}
&lt;/code>&lt;/pre>&lt;p>原因为：es5 bool query 只有 should 条件时，默认 &lt;code>minimum_should_match = 1&lt;/code>，而到了 es7 里，默认值为 0 了，导致 es7 里搜出来的是全部 doc，而 es5 只会搜出符合条件的结果(&lt;a href="https://stackoverflow.com/questions/48984706/default-value-of-minimum-should-match/49012705#49012705">default value of minimum should match&lt;/a>。对于这些差异，可以事先阅读 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html">breaking changes 7.0&lt;/a>，并进行相应修改。对于有不兼容或者有差异的语句，在 &lt;em>数据比对&lt;/em> 步骤也能够测出来。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>在测试通过之后，就可以下线老集群，全面切换到新集群了🎉。&lt;/p>
&lt;p>迁移过程中，有几个踩过的坑需要注意：&lt;/p>
&lt;ul>
&lt;li>es 7 已经废弃了 mapping type: &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html">Removal of mapping types&lt;/a>&lt;/li>
&lt;li>切词插件(ik) 结果比对，保证插件加载正常&lt;/li>
&lt;li>关注新版本的一些默认值改动，一些 breaking changes&lt;/li>
&lt;/ul></content></item><item><title>Elasticsearch terminology: Index &amp; Shard &amp; Segment</title><link>https://when.run/cn/posts/es-terminology/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/es-terminology/</guid><description>&lt;p>&lt;em>&lt;strong>References from &lt;a href="https://stackoverflow.com/a/15429578">https://stackoverflow.com/a/15429578&lt;/a>&lt;/strong>&lt;/em>&lt;/p>
&lt;p>To explain:&lt;/p>
&lt;h2 id="index">Index&lt;/h2>
&lt;p>An &amp;ldquo;index&amp;rdquo; in Elasticsearch is a bit like a database in a relational DB. It&amp;rsquo;s where you store/index your data. But actually, that&amp;rsquo;s just what your application sees. Internally, an index is a logical namespace that points to one or more shards.&lt;/p>
&lt;p>Also, &amp;ldquo;to index&amp;rdquo; means to &amp;ldquo;put&amp;rdquo; your data into Elasticsearch. Your data is both stored (for retrieval) and &amp;ldquo;indexed&amp;rdquo; for search.&lt;/p>
&lt;h2 id="inverted-index">Inverted Index&lt;/h2>
&lt;p>An &amp;ldquo;inverted index&amp;rdquo; is the data structure that Lucene uses to make data searchable. It processes the data, pulls out unique terms or tokens, then records which documents contain those tokens. See &lt;a href="http://en.wikipedia.org/wiki/Inverted_index">http://en.wikipedia.org/wiki/Inverted_index&lt;/a> for more.&lt;/p></description><content>&lt;p>&lt;em>&lt;strong>References from &lt;a href="https://stackoverflow.com/a/15429578">https://stackoverflow.com/a/15429578&lt;/a>&lt;/strong>&lt;/em>&lt;/p>
&lt;p>To explain:&lt;/p>
&lt;h2 id="index">Index&lt;/h2>
&lt;p>An &amp;ldquo;index&amp;rdquo; in Elasticsearch is a bit like a database in a relational DB. It&amp;rsquo;s where you store/index your data. But actually, that&amp;rsquo;s just what your application sees. Internally, an index is a logical namespace that points to one or more shards.&lt;/p>
&lt;p>Also, &amp;ldquo;to index&amp;rdquo; means to &amp;ldquo;put&amp;rdquo; your data into Elasticsearch. Your data is both stored (for retrieval) and &amp;ldquo;indexed&amp;rdquo; for search.&lt;/p>
&lt;h2 id="inverted-index">Inverted Index&lt;/h2>
&lt;p>An &amp;ldquo;inverted index&amp;rdquo; is the data structure that Lucene uses to make data searchable. It processes the data, pulls out unique terms or tokens, then records which documents contain those tokens. See &lt;a href="http://en.wikipedia.org/wiki/Inverted_index">http://en.wikipedia.org/wiki/Inverted_index&lt;/a> for more.&lt;/p>
&lt;h2 id="shard">Shard&lt;/h2>
&lt;p>A &amp;ldquo;shard&amp;rdquo; is an instance of Lucene. It is a fully functional search engine in its own right. An &amp;ldquo;index&amp;rdquo; could consist of a single shard, but generally consists of several shards, to allow the index to grow and to be split over several machines.&lt;/p>
&lt;p>A &amp;ldquo;primary shard&amp;rdquo; is the main home for a document. A &amp;ldquo;replica shard&amp;rdquo; is a copy of the primary shard that provides (1) failover in case the primary dies and (2) increased read throughput&lt;/p>
&lt;h2 id="segment">Segment&lt;/h2>
&lt;p>Each shard contains multiple &amp;ldquo;segments&amp;rdquo;, where a segment is an inverted index. A search in a shard will search each segment in turn, then combine their results into the final results for that shard.&lt;/p>
&lt;p>While you are indexing documents, Elasticsearch collects them in memory (and in the transaction log, for safety) then every second or so, writes a new small segment to disk, and &amp;ldquo;refreshes&amp;rdquo; the search.&lt;/p>
&lt;p>This makes the data in the new segment visible to search (ie they are &amp;ldquo;searchable&amp;rdquo;), but the segment has not been fsync&amp;rsquo;ed to disk, so is still at risk of data loss.&lt;/p>
&lt;p>Every so often, Elasticsearch will &amp;ldquo;flush&amp;rdquo;, which means fsync&amp;rsquo;ing the segments, (they are now &amp;ldquo;committed&amp;rdquo;) and clearing out the transaction log, which is no longer needed because we know that the new data has been written to disk.&lt;/p>
&lt;p>The more segments there are, the longer each search takes. So Elasticsearch will merge a number of segments of a similar size (&amp;ldquo;tier&amp;rdquo;) into a single bigger segment, through a background merge process. Once the new bigger segment is written, the old segments are dropped. This process is repeated on the bigger segments when there are too many of the same size.&lt;/p>
&lt;p>Segments are immutable. When a document is updated, it actually just marks the old document as deleted, and indexes a new document. The merge process also expunges these old deleted documents.&lt;/p>
&lt;p>&lt;em>&lt;strong>References from &lt;a href="https://stackoverflow.com/a/15429578">https://stackoverflow.com/a/15429578&lt;/a>&lt;/strong>&lt;/em>&lt;/p></content></item><item><title>长连接聊天室 Demo</title><link>https://when.run/cn/posts/keep-alive-chat/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/keep-alive-chat/</guid><description>&lt;h4 id="server">Server&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 用来记录所有的客户端连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPAddr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ResolveTCPAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:9999&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ListenTCP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">tcpAddr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpConn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>.&lt;span style="color:#a6e22e">AcceptTCP&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;A client connected : &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">tcpConn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 新连接加入map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span>[&lt;span style="color:#a6e22e">tcpConn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>()] = &lt;span style="color:#a6e22e">tcpConn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">tcpPipe&lt;/span>(&lt;span style="color:#a6e22e">tcpConn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">tcpPipe&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ipStr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;disconnected :&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ipStr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reader&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> string(&lt;span style="color:#a6e22e">message&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里返回消息改为了广播
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">boradcastMessage&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> string(&lt;span style="color:#a6e22e">message&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">boradcastMessage&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 遍历所有客户端并发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="client">Client&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPAddr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ResolveTCPAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:9999&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">DialTCP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">tcpAddr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;connected!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">onMessageRecived&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 控制台聊天功能加入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Scanln&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;quit&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">onMessageRecived&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reader&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="run">Run&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt; go run server.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt; go run client.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content>&lt;h4 id="server">Server&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 用来记录所有的客户端连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPAddr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ResolveTCPAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:9999&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ListenTCP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">tcpAddr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpConn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tcpListener&lt;/span>.&lt;span style="color:#a6e22e">AcceptTCP&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;A client connected : &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">tcpConn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 新连接加入map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span>[&lt;span style="color:#a6e22e">tcpConn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>()] = &lt;span style="color:#a6e22e">tcpConn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">tcpPipe&lt;/span>(&lt;span style="color:#a6e22e">tcpConn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">tcpPipe&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ipStr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;disconnected :&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ipStr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reader&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> string(&lt;span style="color:#a6e22e">message&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里返回消息改为了广播
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">boradcastMessage&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">RemoteAddr&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> string(&lt;span style="color:#a6e22e">message&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">boradcastMessage&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 遍历所有客户端并发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ConnMap&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="client">Client&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPAddr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tcpAddr&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">ResolveTCPAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:9999&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">DialTCP&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">tcpAddr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;connected!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">onMessageRecived&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 控制台聊天功能加入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Scanln&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;quit&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">onMessageRecived&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">TCPConn&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reader&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="run">Run&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt; go run server.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt; go run client.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>TCP 札记</title><link>https://when.run/cn/posts/tcp/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/tcp/</guid><description>&lt;blockquote>
&lt;p>TCP 处于七层网络模型（应表会传网数物）中的传输层。&lt;/p>
&lt;/blockquote>
&lt;h2 id="特点">特点&lt;/h2>
&lt;h3 id="面向连接">面向连接&lt;/h3>
&lt;p>和 UDP 不一样，TCP 传输数据前需要先建立 TCP 连接（此处引出三次握手、四次挥手）。而 UDP 传输数据前不需要建立连接，也不保证可靠传输。&lt;/p>
&lt;h3 id="可靠传输">可靠传输&lt;/h3>
&lt;p>TCP 保证传输的数据：无差错、不丢失、不重复、 &lt;strong>按序到达&lt;/strong> 。&lt;/p>
&lt;h3 id="全双工">全双工&lt;/h3>
&lt;p>通信双方任何时候都能相互通信。并且都有发送缓存、接受缓存。&lt;/p>
&lt;h3 id="面向字节流">面向字节流&lt;/h3>
&lt;p>虽然应用层和 TCP 的交互是一次一个数据块（大小不等），但是 TCP 把这些数据看成仅仅是一连串的无结构字节流。TCP 并不知道所传送的字节流的含义。传输过程如下：&lt;/p>
&lt;p>&lt;img alt="tcp 面向流的概念" src="https://when.run/image/tcp_stream.jpg">&lt;/p>
&lt;p>这里看到，应用层发送其实不是同步发送的，而只是把数据拷到 TCP 发送缓存里，而下一步如何发送，如何把数据切成报文段，都与应用层无关了。&lt;/p>
&lt;p>基于这个字节流传输概念，对于偶尔能听到的 “黏包” 概念也能较为直接的解释。因为 TCP 并没有包的概念，因此自然也就不存在 “黏包” &lt;a href="https://draveness.me/whys-the-design-tcp-message-frame/">为什么 TCP 协议有粘包问题&lt;/a>。&amp;ldquo;黏包&amp;rdquo; 误解的原因是：&amp;ldquo;应用层协议没有使用基于长度或者基于终结符的消息边界，导致多个消息的粘连&amp;rdquo;&lt;/p>
&lt;h2 id="报文段字节流">报文段、字节流&lt;/h2>
&lt;p>TCP 存在一个 “报文段” 的概念，这个指的是：在 TCP 接收到应用层写入的数据之后，会暂存到发送缓存。而 TCP 在发送数据之前，会从发送缓存中取出一部分数据，并且加上 TCP 层的特定头部数据，再往下传输给 IP 层，加上了 TCP 头部的这部分数据，叫做 TCP 的 “报文段”，这个报文段的最大长度叫做 &lt;em>&lt;strong>MSS（最大报文段长度）&lt;/strong>&lt;/em>。而在传输时，报文段会被以字节流的形式进行传输，接收方收到字节流之后，再解析字节流还原成报文段，交付使用。&lt;/p>
&lt;h2 id="可靠传输滑动窗口">可靠传输（滑动窗口）&lt;/h2>
&lt;p>TCP 使用 &lt;strong>滑动窗口&lt;/strong> 来实现可靠传输。TCP 的滑动窗口是以字节为单位的，并对窗口内的字节进行编号，如果窗口内某个低序号的字节未收到确认消息，那么滑动窗口将不会往后移，而会在确认超时之后，重新传送，即 &lt;strong>超时重传&lt;/strong>。这时候，就有可能出现，一条 TCP 链接，某个时刻发生了超时重传，其他数据必须等这个重传恢复之后，才能继续发送。而 HTTP/3 使用的 QUIC 协议使用了多路流复用，同一个传输通道可以同时传输多路流，而不同流也使用不同的流量控制、滑动窗口等，这样即使某一路的流阻塞了，也不会影响其他路的流。&lt;/p></description><content>&lt;blockquote>
&lt;p>TCP 处于七层网络模型（应表会传网数物）中的传输层。&lt;/p>
&lt;/blockquote>
&lt;h2 id="特点">特点&lt;/h2>
&lt;h3 id="面向连接">面向连接&lt;/h3>
&lt;p>和 UDP 不一样，TCP 传输数据前需要先建立 TCP 连接（此处引出三次握手、四次挥手）。而 UDP 传输数据前不需要建立连接，也不保证可靠传输。&lt;/p>
&lt;h3 id="可靠传输">可靠传输&lt;/h3>
&lt;p>TCP 保证传输的数据：无差错、不丢失、不重复、 &lt;strong>按序到达&lt;/strong> 。&lt;/p>
&lt;h3 id="全双工">全双工&lt;/h3>
&lt;p>通信双方任何时候都能相互通信。并且都有发送缓存、接受缓存。&lt;/p>
&lt;h3 id="面向字节流">面向字节流&lt;/h3>
&lt;p>虽然应用层和 TCP 的交互是一次一个数据块（大小不等），但是 TCP 把这些数据看成仅仅是一连串的无结构字节流。TCP 并不知道所传送的字节流的含义。传输过程如下：&lt;/p>
&lt;p>&lt;img alt="tcp 面向流的概念" src="https://when.run/image/tcp_stream.jpg">&lt;/p>
&lt;p>这里看到，应用层发送其实不是同步发送的，而只是把数据拷到 TCP 发送缓存里，而下一步如何发送，如何把数据切成报文段，都与应用层无关了。&lt;/p>
&lt;p>基于这个字节流传输概念，对于偶尔能听到的 “黏包” 概念也能较为直接的解释。因为 TCP 并没有包的概念，因此自然也就不存在 “黏包” &lt;a href="https://draveness.me/whys-the-design-tcp-message-frame/">为什么 TCP 协议有粘包问题&lt;/a>。&amp;ldquo;黏包&amp;rdquo; 误解的原因是：&amp;ldquo;应用层协议没有使用基于长度或者基于终结符的消息边界，导致多个消息的粘连&amp;rdquo;&lt;/p>
&lt;h2 id="报文段字节流">报文段、字节流&lt;/h2>
&lt;p>TCP 存在一个 “报文段” 的概念，这个指的是：在 TCP 接收到应用层写入的数据之后，会暂存到发送缓存。而 TCP 在发送数据之前，会从发送缓存中取出一部分数据，并且加上 TCP 层的特定头部数据，再往下传输给 IP 层，加上了 TCP 头部的这部分数据，叫做 TCP 的 “报文段”，这个报文段的最大长度叫做 &lt;em>&lt;strong>MSS（最大报文段长度）&lt;/strong>&lt;/em>。而在传输时，报文段会被以字节流的形式进行传输，接收方收到字节流之后，再解析字节流还原成报文段，交付使用。&lt;/p>
&lt;h2 id="可靠传输滑动窗口">可靠传输（滑动窗口）&lt;/h2>
&lt;p>TCP 使用 &lt;strong>滑动窗口&lt;/strong> 来实现可靠传输。TCP 的滑动窗口是以字节为单位的，并对窗口内的字节进行编号，如果窗口内某个低序号的字节未收到确认消息，那么滑动窗口将不会往后移，而会在确认超时之后，重新传送，即 &lt;strong>超时重传&lt;/strong>。这时候，就有可能出现，一条 TCP 链接，某个时刻发生了超时重传，其他数据必须等这个重传恢复之后，才能继续发送。而 HTTP/3 使用的 QUIC 协议使用了多路流复用，同一个传输通道可以同时传输多路流，而不同流也使用不同的流量控制、滑动窗口等，这样即使某一路的流阻塞了，也不会影响其他路的流。&lt;/p>
&lt;h2 id="流量控制">流量控制&lt;/h2>
&lt;p>&lt;strong>流量控制（flow control）&lt;/strong> 的作用是让发送方的发送速率不要太快，要让接收方来得及接受。&lt;/p>
&lt;p>当 TCP 端点 A 向 TCP 端点 B 发送数据时，整个过程会出现两个滑动窗口，A 的发送窗口和 B 的接收窗口。当 B 感受到压力过大，或者其他原因需要进行流控时，会给发送方发送消息，告知发送方 &lt;strong>接收窗口(rwnd)&lt;/strong> 的大小，发送方根据这个数值，调整发送窗口的大小。利用滑动窗口机制可以方便的在 TCP 连接上实现对发送方的流量控制。&lt;/p>
&lt;h2 id="拥塞控制">拥塞控制&lt;/h2>
&lt;p>当网络阻塞，例如：链路传输速率只有 10Gb/s ，但是有 100 台计算机，同时以 1Gb/s 的速率传输，这时候就会发生拥塞，导致网络性能变坏，因此需要拥塞控制，防止过多的数据注入到网络中，避免网络中的路由器或者链路过载。拥塞控制有四种算法：&lt;strong>慢开始（slow-start）&lt;/strong>、&lt;strong>拥塞避免（congestion avoidance）&lt;/strong>、&lt;strong>快重传（fast retransmit）&lt;/strong>、&lt;strong>快恢复（fast recovery）&lt;/strong>。 这里网络出现拥塞表现一般为：数据丢失，时延增加，吞吐量下降&lt;/p>
&lt;h3 id="慢开始指数增大">慢开始（指数增大）&lt;/h3>
&lt;p>发送方维护一个拥塞窗口，让发送窗口等于拥塞窗口。最开始把拥塞窗口设为 MSS 大小，每收到一个 ACK，就增加一个 MSS（这里可以看出来，没经过一个传输轮次，拥塞窗口就会加倍）。当拥塞窗口增加到 &lt;strong>慢开始门限&lt;/strong> 之后，改用 &lt;strong>拥塞避免算法&lt;/strong>&lt;/p>
&lt;h3 id="拥塞避免加法增大">拥塞避免（加法增大）&lt;/h3>
&lt;p>不再每收到一个 ACK 就增加一个 MSS，而是每经过一个 RTT（把发送窗口都发送出去并收到 ACK），增加一个 MSS。当发送方判断网络出现拥塞时，把慢开始门限减为发送窗口的一半，并把拥塞窗口设为 1，重新开始慢开始流程&lt;/p>
&lt;h3 id="快重传">快重传&lt;/h3>
&lt;p>首先要求接收方每接收到一个报文段，就发出重复确认，让发送方能尽快重传。接收方收到 3 个重复确认就应该开始重传对方未收到的报文段，而不是等待计时器过期。&lt;/p>
&lt;h3 id="快恢复">快恢复&lt;/h3>
&lt;p>当发送方收到 3 个重复确认之后，把拥塞控制设置为慢开始门限的一半，然后开始执行拥塞控制算法（加法增大）&lt;/p>
&lt;p>结合拥塞控制和流量控制，发送方的发送窗口值为 &lt;code>min(拥塞窗口, 接收窗口)&lt;/code>&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>计算机网络（第六版 谢希仁著）&lt;/li>
&lt;/ul></content></item><item><title>Python2 迁移到 Python3 规划和实施</title><link>https://when.run/cn/posts/python2-to-python3/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/python2-to-python3/</guid><description>&lt;h2 id="前期规划">前期规划&lt;/h2>
&lt;p>在开始迁移前，需要大致盘点一下都会有哪些工作量，哪些代码需要做兼容，哪些服务需要做迁移。前期可以大概分成一下几部分：&lt;/p>
&lt;ul>
&lt;li>主项目（主要的项目，承担了主要的日常开发任务以及业务需求）&lt;/li>
&lt;li>其他服务（为主项目服务的各个服务，如支付、IM、广告等）&lt;/li>
&lt;li>依赖库，依赖又包括：
&lt;ul>
&lt;li>公司内部基础组件&lt;/li>
&lt;li>第三方依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在列出所有的 &amp;ldquo;代码清单&amp;rdquo; 后，需要有个先后顺序，来逐步的进行迁移。首先上面提到的三个大点中，&lt;strong>其他服务&lt;/strong> 其实优先级并不高，因为日常不怎么会开发，处于维护状态。因此保持正常运行即可，优先进行其他两项的迁移。而依赖库处处在引用，不提前进行 Python3 适配其他工作将无法进行。因此适配顺序如下：&lt;/p>
&lt;ol>
&lt;li>排查第三方依赖库，测试，升级到兼容 Python2/Python3 的版本&lt;/li>
&lt;li>排查公司内部基础组件库，测试，兼容适配 Python2/Python3&lt;/li>
&lt;li>进行主项目的代码层面适配，使用工具和一些库进行 2 和 3 的适配，使现有代码能同时在 2 和 3 下面跑。增加 py3 环境的单元测试。&lt;/li>
&lt;/ol>
&lt;p>在一切开始之前，还需要保证日常新加的代码不再引入不兼容的代码，因此应该提前使用 &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> 对每个 commit 进行检查，使用 &lt;a href="https://github.com/pycqa/pylint">pylint&lt;/a> 进行兼容性检查，配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .pre-commit-config.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- repo: https://github.com/xiachufang/mirrors-pylint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rev: v1.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hooks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: pylint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --py3k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --score&lt;span style="color:#f92672">=&lt;/span>n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="迁移中">迁移中&lt;/h2>
&lt;p>迁移办法一般是先排查关键字，如 &lt;code>iteritems&lt;/code>/&lt;code>itervalues&lt;/code>/&lt;code>xrange&lt;/code> 等，这些可以全部使用 &lt;a href="https://six.readthedocs.io/">six&lt;/a> 相应方法直接替换。 除此之外，应该给单元测试增加 Python3 环境，这样首先保证单元测试能在 Python3 下跑通，在调通单元测试之后，如果测试覆盖率高，那么基本已经改完很大一部分代码了。在给代码做适配是，可以使用 &lt;a href="http://python-future.org/index.html">futurize&lt;/a> 来自动修改一些代码，减少一些重复工作。并且可以参考 futurize 的 &lt;a href="http://python-future.org/compatible_idioms.html">Cheat Sheet: Writing Python 2-3 compatible code&lt;/a> 来做对照，进行修改代码。&lt;/p></description><content>&lt;h2 id="前期规划">前期规划&lt;/h2>
&lt;p>在开始迁移前，需要大致盘点一下都会有哪些工作量，哪些代码需要做兼容，哪些服务需要做迁移。前期可以大概分成一下几部分：&lt;/p>
&lt;ul>
&lt;li>主项目（主要的项目，承担了主要的日常开发任务以及业务需求）&lt;/li>
&lt;li>其他服务（为主项目服务的各个服务，如支付、IM、广告等）&lt;/li>
&lt;li>依赖库，依赖又包括：
&lt;ul>
&lt;li>公司内部基础组件&lt;/li>
&lt;li>第三方依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在列出所有的 &amp;ldquo;代码清单&amp;rdquo; 后，需要有个先后顺序，来逐步的进行迁移。首先上面提到的三个大点中，&lt;strong>其他服务&lt;/strong> 其实优先级并不高，因为日常不怎么会开发，处于维护状态。因此保持正常运行即可，优先进行其他两项的迁移。而依赖库处处在引用，不提前进行 Python3 适配其他工作将无法进行。因此适配顺序如下：&lt;/p>
&lt;ol>
&lt;li>排查第三方依赖库，测试，升级到兼容 Python2/Python3 的版本&lt;/li>
&lt;li>排查公司内部基础组件库，测试，兼容适配 Python2/Python3&lt;/li>
&lt;li>进行主项目的代码层面适配，使用工具和一些库进行 2 和 3 的适配，使现有代码能同时在 2 和 3 下面跑。增加 py3 环境的单元测试。&lt;/li>
&lt;/ol>
&lt;p>在一切开始之前，还需要保证日常新加的代码不再引入不兼容的代码，因此应该提前使用 &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> 对每个 commit 进行检查，使用 &lt;a href="https://github.com/pycqa/pylint">pylint&lt;/a> 进行兼容性检查，配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .pre-commit-config.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- repo: https://github.com/xiachufang/mirrors-pylint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rev: v1.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hooks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: pylint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --py3k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --score&lt;span style="color:#f92672">=&lt;/span>n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="迁移中">迁移中&lt;/h2>
&lt;p>迁移办法一般是先排查关键字，如 &lt;code>iteritems&lt;/code>/&lt;code>itervalues&lt;/code>/&lt;code>xrange&lt;/code> 等，这些可以全部使用 &lt;a href="https://six.readthedocs.io/">six&lt;/a> 相应方法直接替换。 除此之外，应该给单元测试增加 Python3 环境，这样首先保证单元测试能在 Python3 下跑通，在调通单元测试之后，如果测试覆盖率高，那么基本已经改完很大一部分代码了。在给代码做适配是，可以使用 &lt;a href="http://python-future.org/index.html">futurize&lt;/a> 来自动修改一些代码，减少一些重复工作。并且可以参考 futurize 的 &lt;a href="http://python-future.org/compatible_idioms.html">Cheat Sheet: Writing Python 2-3 compatible code&lt;/a> 来做对照，进行修改代码。&lt;/p>
&lt;h3 id="会遇到的问题">会遇到的问题&lt;/h3>
&lt;h4 id="关键字方法">关键字/方法&lt;/h4>
&lt;p>上面有提到，某些关键字或者方法，到了 Python3 里面已经没有了，比如 &lt;code>xrange&lt;/code>/&lt;code>dict.iteritems&lt;/code>/&lt;code>dict.itervalues&lt;/code>，这个一般全局搜索就能排除掉。&lt;/p>
&lt;h4 id="内置函数返回类型">内置函数返回类型&lt;/h4>
&lt;ul>
&lt;li>在 Python2 中，&lt;code>dict.keys&lt;/code> 返回的是一个 list，而到了 Python3 中，返回的是一个 &lt;code>dict_keys&lt;/code>，如果存在使用下标取，那么是会有问题的。如 &lt;code>{&amp;quot;K&amp;quot;: &amp;quot;V&amp;quot;}.keys()[0]&lt;/code>&lt;/li>
&lt;li>Python2 中，map/reduce/filter 之类的关键字返回的是个 list，到了 3 中，返回的是 generator，如果需要下标访问是需要转成 list/tuple 的&lt;/li>
&lt;li>etc&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="strbytesunicode">str/bytes/unicode&lt;/h3>
&lt;p>这个应当属迁移的最繁琐的地方。&lt;/p>
&lt;p>中间遇到一次问题，排查了很久。代码库中有一个 &lt;code>@cache&lt;/code> 装饰器，用来缓存函数返回值，在 py2 中有如下一段代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@cache&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;cache_key&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;py2 返回结构&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cache 拿到函数返回值后，原样放进 Memcached，因为 Python2 中，str/bytes 实际上是不敏感的，甚至可以等同。该 &lt;code>foo&lt;/code> 函数在 py2 下返回的是一个带 encoding 的 str，可以看做是 bytes 类型，这时候，如果在 py3 下把缓存结果取出来，那么将会是拿到一个 bytes 类型: &lt;code>b&amp;quot;py2 返回结构&amp;quot;&lt;/code>，这里就很容易出错了，在 Python2 下时，这个和 str 一样，可以当做 str 处理，但是 Python3 必须正视类型，该用 str(text type) 就不能用 bytes。&lt;/p>
&lt;h2 id="代码库迁移完成">代码库迁移完成&lt;/h2>
&lt;p>把代码库全部兼容 Python2 和 Python3 之后，这时候代码库是可以同时在 Python2 和 Python3 上跑的，因此可以逐步开始切分流量，大概可以分成这么几个步骤：&lt;/p>
&lt;ol>
&lt;li>把 staging 流量复制到 Python3 的环境&lt;/li>
&lt;li>部署 production 的 Python3 环境，并切分办公室流量至 Python3 环境&lt;/li>
&lt;li>切分线上小部分流量到 Python3 环境，并逐步增加，直至全部覆盖&lt;/li>
&lt;/ol>
&lt;h2 id="迁移后工作">迁移后工作&lt;/h2>
&lt;p>全部迁移完成后，自然会给代码加上 type hint，前期可以使用 pre-commit 增加 mypy 类型检查，并且只检查改动到的文件。与此同时，使用 &lt;a href="https://github.com/Instagram/MonkeyType">MonkeyType&lt;/a> 收集类型，自动添加一部分，减少工作量。&lt;/p>
&lt;p>至此，迁移工作已经全部完成。&lt;/p></content></item><item><title>向量时钟(Vector Clock)</title><link>https://when.run/cn/posts/vector-clock/</link><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/vector-clock/</guid><description>&lt;h2 id="向量时钟vector-clock">向量时钟(Vector Clock)&lt;/h2>
&lt;p>向量时钟是在分布式系统中检测事件因果关系的一种算法。如图：&lt;img alt="Imgur" src="https://i.imgur.com/0XRtT9o.png">&lt;/p>
&lt;p>系统中有 ABC 三个进程，每个进程都维护自己的一个向量时钟，时钟的规则如下：&lt;/p>
&lt;ol>
&lt;li>初始时，所有进程的时钟都为 0&lt;/li>
&lt;li>进程每次处理一个内部事件，其逻辑时钟加 1&lt;/li>
&lt;li>每次发送消息，其逻辑时钟加 1，并且将其向量时钟一起发送&lt;/li>
&lt;li>每次收到消息，其逻辑时钟加 1，并更新本地时钟，逻辑时钟的值为本地时钟里值的最大值&lt;/li>
&lt;/ol>
&lt;p>每个进程维护的所有逻辑时钟为一个向量时钟。假设进程 A 向量时钟如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+----+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>A:&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>B:&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">===&amp;gt;&lt;/span> 这个整体称为 A 的 &lt;span style="color:#e6db74">&amp;#34;向量时钟&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>其中&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>A:&lt;span style="color:#ae81ff">0&lt;/span> 为 A 的逻辑时钟
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>C:&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+----+&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="因果关系判断规则">因果关系判断规则&lt;/h3>
&lt;ol>
&lt;li>如果时钟 V1 的每个逻辑时钟值都比时钟 V2 大，那么称 V1 比 V2 先发生。如： &lt;code>V1: [A:2,B:4,C:2]&lt;/code> 与 &lt;code>V2: [A:1,B:2,C:1]&lt;/code>&lt;/li>
&lt;li>如果不满足条件 1), 即有的值 V1 比 V2 大，有的 V2 比 V1 大，那么看做两个事件同时发生&lt;/li>
&lt;/ol>
&lt;h2 id="应用">应用&lt;/h2>
&lt;p>向量时钟通常用于检测 replication 之间的数据冲突。例如 Dynamo: &lt;a href="https://cloudacademy.com/blog/data-versioning-with-dynamodb-an-inside-look-into-nosql-part-5/">Data Versioning With DynamoDB&lt;/a>。&lt;/p></description><content>&lt;h2 id="向量时钟vector-clock">向量时钟(Vector Clock)&lt;/h2>
&lt;p>向量时钟是在分布式系统中检测事件因果关系的一种算法。如图：&lt;img alt="Imgur" src="https://i.imgur.com/0XRtT9o.png">&lt;/p>
&lt;p>系统中有 ABC 三个进程，每个进程都维护自己的一个向量时钟，时钟的规则如下：&lt;/p>
&lt;ol>
&lt;li>初始时，所有进程的时钟都为 0&lt;/li>
&lt;li>进程每次处理一个内部事件，其逻辑时钟加 1&lt;/li>
&lt;li>每次发送消息，其逻辑时钟加 1，并且将其向量时钟一起发送&lt;/li>
&lt;li>每次收到消息，其逻辑时钟加 1，并更新本地时钟，逻辑时钟的值为本地时钟里值的最大值&lt;/li>
&lt;/ol>
&lt;p>每个进程维护的所有逻辑时钟为一个向量时钟。假设进程 A 向量时钟如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+----+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>A:&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>B:&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">===&amp;gt;&lt;/span> 这个整体称为 A 的 &lt;span style="color:#e6db74">&amp;#34;向量时钟&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>其中&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>A:&lt;span style="color:#ae81ff">0&lt;/span> 为 A 的逻辑时钟
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span>C:&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+----+&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="因果关系判断规则">因果关系判断规则&lt;/h3>
&lt;ol>
&lt;li>如果时钟 V1 的每个逻辑时钟值都比时钟 V2 大，那么称 V1 比 V2 先发生。如： &lt;code>V1: [A:2,B:4,C:2]&lt;/code> 与 &lt;code>V2: [A:1,B:2,C:1]&lt;/code>&lt;/li>
&lt;li>如果不满足条件 1), 即有的值 V1 比 V2 大，有的 V2 比 V1 大，那么看做两个事件同时发生&lt;/li>
&lt;/ol>
&lt;h2 id="应用">应用&lt;/h2>
&lt;p>向量时钟通常用于检测 replication 之间的数据冲突。例如 Dynamo: &lt;a href="https://cloudacademy.com/blog/data-versioning-with-dynamodb-an-inside-look-into-nosql-part-5/">Data Versioning With DynamoDB&lt;/a>。&lt;/p></content></item><item><title>如何设计一个秒杀系统</title><link>https://when.run/cn/posts/miao-sha/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://when.run/cn/posts/miao-sha/</guid><description>&lt;h1 id="如何设计一个秒杀系统">如何设计一个秒杀系统&lt;/h1>
&lt;blockquote>
&lt;p>总结极客时间专栏《如何设计一个秒杀系统》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://time.geekbang.org/column/127">极客时间&lt;/a>&lt;/p>
&lt;h1 id="问题">问题&lt;/h1>
&lt;p>其实这类高并发问题，总结起来就是两点，&lt;code>并发读&lt;/code>、 &lt;code>并发写&lt;/code>。并且在这种情况下，系统还需要做到：&lt;/p>
&lt;ul>
&lt;li>高性能：支持并发读并发写&lt;/li>
&lt;li>一致性：保证系统正确，如不发生超卖等&lt;/li>
&lt;li>高可用：保证系统在极端条件下的可用性，PlanB 等&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="原则">原则&lt;/h1>
&lt;ul>
&lt;li>数据尽量少：c-s 传输过程中，数据尽量少，减少传输时间&lt;/li>
&lt;li>请求数尽量少：减少资源消耗&lt;/li>
&lt;li>路径尽量短：请求会经过若干个中间件，经过的中间件应该尽量少，每个节点都可能会挂，最后整体可用性(&amp;lt;1)就是经过的所有节点可用性的乘积&lt;/li>
&lt;li>依赖尽量少：指的是业务依赖（优惠券、用户信息等），防止主要服务被其他附属依赖给拖垮掉&lt;/li>
&lt;li>不要有单点：单点就是整个系统中最弱的地方，很容易被击垮&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="动静分离">动静分离&lt;/h1>
&lt;h2 id="静态数据">静态数据&lt;/h2>
&lt;ul>
&lt;li>统一 cache 层&lt;/li>
&lt;li>CDN&lt;/li>
&lt;li>代理服务器缓存&lt;/li>
&lt;/ul>
&lt;h2 id="动态数据">动态数据&lt;/h2>
&lt;ul>
&lt;li>业务隔离：必须参加活动需要提前报名，服务器对这些热点进行预热&lt;/li>
&lt;li>系统隔离：秒杀系统单独部署，落到不同集群当中，避免拖垮其他服务&lt;/li>
&lt;li>数据隔离：针对这些热点数据，比如启用单独的 cache 或 MySQL 实例&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="流量削峰">流量削峰&lt;/h1>
&lt;p>面对秒杀系统需要承受的海量流量，如果全部落到数据库上，那么数据库将不堪重负，因此可以进行分层的流量削峰：&lt;/p>
&lt;ul>
&lt;li>答题、验证码等，在客户端直接过滤，将流量摊平，而不是瞬时洪峰流量&lt;/li>
&lt;li>服务端请求排队，请求到达了不即时返回，而是塞进队列里，FIFO 方式进行处理，然后异步通知客户端（体验不好，用户无法实时收到反馈）&lt;/li>
&lt;li>分层校验，保证落到数据库的请求都是有效请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/fb7F5UO.png">&lt;/p>
&lt;hr>
&lt;h1 id="减库存">减库存&lt;/h1>
&lt;p>减库存是最关键的一个逻辑，需要保证高并发的情况下，不会发生超售。常用的有三种减库存方案：&lt;/p>
&lt;ul>
&lt;li>下单减库存：下单就减库存，会产生非常多无效订单，体验不好。&lt;/li>
&lt;li>付款减库存：可能会有用户在付款完成之后，结果提示没库存了。&lt;/li>
&lt;li>预扣库存：用户下单后减库存，但是库存只有几分钟有效期，过了有效期就回收库存，体验较好。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="planb">PlanB&lt;/h1>
&lt;p>高可用系统的 PlanB，针对秒杀系统，可以做一些事，比如：&lt;/p>
&lt;ul>
&lt;li>降级：如系统容量到达一点程度之后，关闭一些非核心功能，把有限的资源让给核心功能&lt;/li>
&lt;li>限流：在事先进行压力测试时，预估一个最高 QPS，并将其设为阈值，到达这个阈值之后，其他请求扔队列或者直接丢弃&lt;/li>
&lt;li>拒绝服务：最坏的情况，达到某个临界点（CPU 90%）直接拒绝服务，保护服务，等负载下降之后恢复，避免被直接长时间拖垮。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vRlVzqW.png">&lt;/p></description><content>&lt;h1 id="如何设计一个秒杀系统">如何设计一个秒杀系统&lt;/h1>
&lt;blockquote>
&lt;p>总结极客时间专栏《如何设计一个秒杀系统》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://time.geekbang.org/column/127">极客时间&lt;/a>&lt;/p>
&lt;h1 id="问题">问题&lt;/h1>
&lt;p>其实这类高并发问题，总结起来就是两点，&lt;code>并发读&lt;/code>、 &lt;code>并发写&lt;/code>。并且在这种情况下，系统还需要做到：&lt;/p>
&lt;ul>
&lt;li>高性能：支持并发读并发写&lt;/li>
&lt;li>一致性：保证系统正确，如不发生超卖等&lt;/li>
&lt;li>高可用：保证系统在极端条件下的可用性，PlanB 等&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="原则">原则&lt;/h1>
&lt;ul>
&lt;li>数据尽量少：c-s 传输过程中，数据尽量少，减少传输时间&lt;/li>
&lt;li>请求数尽量少：减少资源消耗&lt;/li>
&lt;li>路径尽量短：请求会经过若干个中间件，经过的中间件应该尽量少，每个节点都可能会挂，最后整体可用性(&amp;lt;1)就是经过的所有节点可用性的乘积&lt;/li>
&lt;li>依赖尽量少：指的是业务依赖（优惠券、用户信息等），防止主要服务被其他附属依赖给拖垮掉&lt;/li>
&lt;li>不要有单点：单点就是整个系统中最弱的地方，很容易被击垮&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="动静分离">动静分离&lt;/h1>
&lt;h2 id="静态数据">静态数据&lt;/h2>
&lt;ul>
&lt;li>统一 cache 层&lt;/li>
&lt;li>CDN&lt;/li>
&lt;li>代理服务器缓存&lt;/li>
&lt;/ul>
&lt;h2 id="动态数据">动态数据&lt;/h2>
&lt;ul>
&lt;li>业务隔离：必须参加活动需要提前报名，服务器对这些热点进行预热&lt;/li>
&lt;li>系统隔离：秒杀系统单独部署，落到不同集群当中，避免拖垮其他服务&lt;/li>
&lt;li>数据隔离：针对这些热点数据，比如启用单独的 cache 或 MySQL 实例&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="流量削峰">流量削峰&lt;/h1>
&lt;p>面对秒杀系统需要承受的海量流量，如果全部落到数据库上，那么数据库将不堪重负，因此可以进行分层的流量削峰：&lt;/p>
&lt;ul>
&lt;li>答题、验证码等，在客户端直接过滤，将流量摊平，而不是瞬时洪峰流量&lt;/li>
&lt;li>服务端请求排队，请求到达了不即时返回，而是塞进队列里，FIFO 方式进行处理，然后异步通知客户端（体验不好，用户无法实时收到反馈）&lt;/li>
&lt;li>分层校验，保证落到数据库的请求都是有效请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/fb7F5UO.png">&lt;/p>
&lt;hr>
&lt;h1 id="减库存">减库存&lt;/h1>
&lt;p>减库存是最关键的一个逻辑，需要保证高并发的情况下，不会发生超售。常用的有三种减库存方案：&lt;/p>
&lt;ul>
&lt;li>下单减库存：下单就减库存，会产生非常多无效订单，体验不好。&lt;/li>
&lt;li>付款减库存：可能会有用户在付款完成之后，结果提示没库存了。&lt;/li>
&lt;li>预扣库存：用户下单后减库存，但是库存只有几分钟有效期，过了有效期就回收库存，体验较好。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="planb">PlanB&lt;/h1>
&lt;p>高可用系统的 PlanB，针对秒杀系统，可以做一些事，比如：&lt;/p>
&lt;ul>
&lt;li>降级：如系统容量到达一点程度之后，关闭一些非核心功能，把有限的资源让给核心功能&lt;/li>
&lt;li>限流：在事先进行压力测试时，预估一个最高 QPS，并将其设为阈值，到达这个阈值之后，其他请求扔队列或者直接丢弃&lt;/li>
&lt;li>拒绝服务：最坏的情况，达到某个临界点（CPU 90%）直接拒绝服务，保护服务，等负载下降之后恢复，避免被直接长时间拖垮。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vRlVzqW.png">&lt;/p></content></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 重案组之虎</title>
    <link>https://when.run/posts/</link>
    <description>Recent content in Posts on 重案组之虎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 08 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://when.run/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>向量时钟(Vector Clock)</title>
      <link>https://when.run/posts/vector-clock/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://when.run/posts/vector-clock/</guid>
      <description>向量时钟(Vector Clock) 向量时钟是在分布式系统中检测事件因果关系的一种算法。如图：系统中有 ABC 三个进程，每个进程都维护自己的一个向量时钟，时钟的规则如下： 1. 初始时，所有进程的时钟都为 0 2. 进程每次处理一个内部事件，其逻辑时钟加 1 3. 每次发送消息，其逻辑时钟加 1，并且将其向量时钟一起发送 4. 每次收到消息，其逻辑时钟加 1，并更新本地时钟，逻辑时钟的值为本地时钟里值的最大值
每个进程维护的所有逻辑时钟为一个向量时钟。假设进程 A 向量时钟如下：
+----+ |A:0 | |B:3 | ===&amp;gt; 这个整体称为 A 的 &amp;quot;向量时钟&amp;quot;，其中，A:0 为 A 的逻辑时钟 |C:5 | +----+  因果关系判断规则  如果时钟 V1 的每个逻辑时钟值都比时钟 V2 大，那么称 V1 比 V2 先发生。如： V1: [A:2,B:4,C:2] 与 V2: [A:1,B:2,C:1] 如果不满足条件 1), 即有的值 V1 比 V2 大，有的 V2 比 V1 大，那么看做两个事件同时发生  应用 向量时钟通常用于检测 replication 之间的数据冲突。例如 Dynamo: Data Versioning With DynamoDB。</description>
    </item>
    
    <item>
      <title>我订阅的 RSS 源</title>
      <link>https://when.run/posts/rss-rec/</link>
      <pubDate>Tue, 01 Oct 2019 10:31:23 +0800</pubDate>
      
      <guid>https://when.run/posts/rss-rec/</guid>
      <description> 之前一直寻找好用的 RSS 订阅软件，起初试了 Reeder, 可是不能设置代理，同步速度让我捉急，后来发现 slack 有 RSS APP，因此转而使用 slack 订阅。slack 订阅很方便，免费的空间也够用。
 下面是我订阅的一些 RSS 源，备份一份以防丢失。
 面向信仰编程 - Articles 克鲁斯卡尔的博客 Techshack Weekly - issues JerryQu 的小站 有赞技术团队 Dave Cheney 美团技术团队 酷 壳 – CoolShell IBM Developer 中国 : Big data and analytics,Cloud computing,Internet of Things,Java technology,Open source,Web development : 技术文章,教程 云风的 BLOG The Go Programming Language Blog shonenada qcrao Posts on WKLKEN BUILDING  王垠的博客 - 当然我在扯淡 Instagram Engineering - Medium  效果图: </description>
    </item>
    
    <item>
      <title>[转]如何编写无法维护的代码</title>
      <link>https://when.run/posts/unmain/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://when.run/posts/unmain/</guid>
      <description>永远不要（把自己遇到的问题）归因于（他人的）恶意，这恰恰说明了（你自己的）无能。 &amp;ndash; 拿破仑
 为了造福大众，在Java编程领域创造就业机会，兄弟我在此传授大师们的秘籍。这些大师写的代码极其难以维护，后继者就是想对它做最简单的修改都需要花上数年时间。而且，如果你能对照秘籍潜心修炼，你甚至可以给自己弄个铁饭碗，因为除了你之外，没人能维护你写的代码。再而且，如果你能练就秘籍中的全部招式，那么连你自己都无法维护你的代码了！
你不想练功过度走火入魔吧。那就不要让你的代码一眼看去就完全无法维护，只要它实质上是那样就行了。否则，你的代码就有被重写或重构的风险！
阅读全文</description>
    </item>
    
  </channel>
</rss>